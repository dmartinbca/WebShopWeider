@inject ProductService Products
@inject AuthService Auth
@implements IDisposable

@if (items is null)
{
    <div class="text-center p-5">Cargando productos...</div>
}
else if (!items.Any())
{
    <div class="text-center p-5">No hay productos.</div>
}
else
{
    <div class="row g-3">
        @foreach (var p in items)
        {
            <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                <ProductCard Product="p" />
            </div>
        }
    </div>
}

@code {
    [Parameter] public IEnumerable<Product>? Data { get; set; }
    private IEnumerable<Product>? items;

    protected override async Task OnInitializedAsync()
    {
        // ✅ Sin wrapper, directo porque el evento es Func<Task>
        Auth.OnCustomerChanged += OnCustomerChanged;
        items = Data ?? await Products.GetAllAsync();
        Console.WriteLine($"[ProductGrid.OnInitializedAsync] Items: {items?.Count()}");
    }

    // ✅ CRÍTICO: Detectar cambios en el parámetro Data
    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"[ProductGrid.OnParametersSetAsync] Data cambió, Items: {Data?.Count()}");

        // Si Data cambió, actualizar items
        if (Data != null)
        {
            items = Data;
            Console.WriteLine($"[ProductGrid.OnParametersSetAsync] Items actualizados a {items?.Count()}");
        }
        else
        {
            items = await Products.GetAllAsync();
        }
    }

    // ✅ Ahora es directo, sin wrapper
    private async Task OnCustomerChanged()
    {
        Console.WriteLine($"[ProductGrid.OnCustomerChanged] Actualizando productos");
        items = Data ?? await Products.GetAllAsync();
        await InvokeAsync(StateHasChanged);
        Console.WriteLine($"[ProductGrid.OnCustomerChanged] Completado - Items: {items?.Count()}");
    }

    public void Dispose()
    {
        Auth.OnCustomerChanged -= OnCustomerChanged;
    }
}
