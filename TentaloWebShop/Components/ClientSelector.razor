@inject AuthService Auth
@inject ClientSelectionService ClientSelection
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ProductService Products
@implements IDisposable

@if (Auth.CurrentUser?.Tipo == "Sales Team")
{
    <div class="client-selector-banner @(ClientSelection.SelectedClient != null ? "has-selection" : "")">
        <div class="container-fluid">
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center gap-3">
                    <i class="bi bi-person-badge fs-5"></i>
                    @if (ClientSelection.SelectedClient != null)
                    {
                        <div>
                            <span class="fw-semibold">Cliente seleccionado:</span>
                            <span class="ms-2">@ClientSelection.SelectedClient.Name</span>
                            <span class="text-muted ms-2">(Cód: @ClientSelection.SelectedClient.CustNo)</span>
                        </div>
                    }
                    else
                    {
                        <span class="text-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            No hay cliente seleccionado
                        </span>
                    }
                </div>
                <button class="btn btn-sm btn-outline-light" @onclick="OpenClientModal">
                    <i class="bi bi-search me-2"></i>
                    @(ClientSelection.SelectedClient != null ? "Cambiar Cliente" : "Seleccionar Cliente")
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal de selección de cliente -->
<div class="modal fade" id="clientSelectorModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-people me-2"></i>
                    Seleccionar Cliente
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <!-- Barra de búsqueda -->
                <div class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text"
                               class="form-control"
                               placeholder="Buscar por nombre o código de cliente..."
                               @bind="searchTerm"
                               @bind:event="oninput" />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        }
                    </div>
                </div>

                <!-- Lista de clientes -->
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-danger" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-3 text-muted">Cargando clientes...</p>
                    </div>
                }
                else if (clients == null || clients.Count == 0)
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        No se encontraron clientes
                    </div>
                }
                else
                {
                    <div class="client-list">
                        @foreach (var client in FilteredClients)
                        {
                            <div class="client-item @(selectedClientTemp?.CustNo == client.CustNo ? "selected" : "")"
                                 @onclick="() => SelectClient(client)">
                                <div class="client-info">
                                    <div class="client-name">
                                        <i class="bi bi-building me-2"></i>
                                        @client.Name
                                    </div>
                                    <div class="client-details">
                                        <span class="badge bg-secondary me-2">@client.CustNo</span>
                                        @if (!string.IsNullOrEmpty(client.City))
                                        {
                                            <span class="text-muted">
                                                <i class="bi bi-geo-alt me-1"></i>@client.City
                                            </span>
                                        }
                                    </div>
                                    @if (client.balanceDue > 0)
                                    {
                                        <div class="client-balance mt-2">
                                            <small class="text-muted">Saldo pendiente: @client.balanceDue.ToString("N2") €</small>
                                        </div>
                                    }
                                </div>
                                @if (selectedClientTemp?.CustNo == client.CustNo)
                                {
                                    <i class="bi bi-check-circle-fill text-success fs-4"></i>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                @if (ClientSelection.SelectedClient != null)
                {
                    <button type="button" class="btn btn-outline-danger" @onclick="ClearClientSelection">
                        <i class="bi bi-x-circle me-2"></i>
                        Quitar Selección
                    </button>
                }
                <button type="button"
                        class="btn btn-danger"
                        disabled="@(selectedClientTemp == null)"
                        @onclick="ConfirmSelection">
                    <i class="bi bi-check-lg me-2"></i>
                    Confirmar Selección
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .client-selector-banner {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
        padding: 12px 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: sticky;
        top: 56px;
        z-index: 1020;
    }

        .client-selector-banner.has-selection {
            background: linear-gradient(135deg, #28a745 0%, #218838 100%);
        }

    .client-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .client-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        margin-bottom: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .client-item:hover {
            border-color: #dc3545;
            background-color: #f8f9fa;
            transform: translateX(4px);
        }

        .client-item.selected {
            border-color: #28a745;
            background-color: #d4edda;
        }

    .client-info {
        flex: 1;
    }

    .client-name {
        font-weight: 600;
        font-size: 1.1rem;
        color: #212529;
        margin-bottom: 6px;
    }

    .client-details {
        display: flex;
        align-items: center;
        gap: 12px;
        flex-wrap: wrap;
    }

    .client-balance {
        padding-top: 4px;
    }

    @@media (max-width: 768px) {
        .client-selector-banner {
            font-size: 0.9rem;
            padding: 10px 0;
        }

            .client-selector-banner .d-flex {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start !important;
            }

            .client-selector-banner button {
                width: 100%;
            }
    }
</style>

@code {
    private List<Customer>? clients;
    private Customer? selectedClientTemp;
    private string searchTerm = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await ClientSelection.InitializeAsync();
        ClientSelection.OnClientChanged += OnClientChanged;

        if (Auth.CurrentUser?.Tipo == "Sales Team")
        {
            await LoadClients();
        }
    }

    private void OnClientChanged()
    {
        // Refrescar la UI cuando cambia el cliente
        StateHasChanged();
    }

    private async Task LoadClients()
    {
        if (Auth.CurrentUser?.salesCode == null) return;

        isLoading = true;
        try
        {
            clients = await ClientSelection.GetClientsForSalesperson(Auth.CurrentUser.salesCode);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR LoadClients] {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<Customer> FilteredClients
    {
        get
        {
            if (clients == null) return Enumerable.Empty<Customer>();

            if (string.IsNullOrWhiteSpace(searchTerm))
                return clients;

            var search = searchTerm.ToLower();
            return clients.Where(c =>
                (c.Name?.ToLower().Contains(search) ?? false) ||
                (c.CustNo?.ToLower().Contains(search) ?? false) ||
                (c.City?.ToLower().Contains(search) ?? false)
            );
        }
    }

    private void SelectClient(Customer client)
    {
        selectedClientTemp = client;
    }

    private async Task ConfirmSelection()
    {
        if (selectedClientTemp != null)
        {
            await ClientSelection.SelectClient(selectedClientTemp);
            await CloseModal();

            // NO redirigir - El catálogo se refresca automáticamente por los eventos
            // Si estamos en una página que necesita refrescar, se refresca sola gracias a OnCustomerChanged
        }
    }

    private async Task ClearClientSelection()
    {
        await ClientSelection.ClearSelection();
        selectedClientTemp = null;
        await CloseModal();

        // NO redirigir - El catálogo se refresca automáticamente
    }

    private async Task OpenClientModal()
    {
        selectedClientTemp = ClientSelection.SelectedClient;

        // Bootstrap 5 nativo - sin jQuery
        await JS.InvokeVoidAsync("eval",
            "new bootstrap.Modal(document.getElementById('clientSelectorModal')).show()");
    }

    private async Task CloseModal()
    {
        // Bootstrap 5 nativo - sin jQuery
        await JS.InvokeVoidAsync("eval",
            "bootstrap.Modal.getInstance(document.getElementById('clientSelectorModal'))?.hide()");
    }

    private void ClearSearch()
    {
        searchTerm = "";
    }

    public void Dispose()
    {
        ClientSelection.OnClientChanged -= OnClientChanged;
    }
}
