@inject CartService Cart
@inject NavigationManager Nav

<div class="card product-card h-100">
    <div class="product-media" @onclick="Open" role="button" tabindex="0"
         @onkeypress="@(async (e) => { if (e.Key == "Enter" || e.Key == " ") await Task.Run(Open); })">
        <div class="image-container">
            <img src="@(!string.IsNullOrWhiteSpace(Product.ImageUrl) ? Product.ImageUrl : "/images/image.png")"
                 alt="@Product.Name"
                 loading="lazy"
                 onerror="this.src='/images/image.png'; this.classList.add('is-placeholder');"
                 onload="if (this.src.indexOf('/images/image.png') !== -1) this.classList.add('is-placeholder');" />
            <div class="image-overlay">
                <i class="bi bi-eye"></i>
            </div>
        </div>

        <!-- Badges/Tags -->
        @if (Product.Tags.Any())
        {
            <div class="product-badges">
                @foreach (var tag in Product.Tags.Take(2))
                {
                    <span class="badge product-badge">@tag</span>
                }
            </div>
        }
    </div>

    <div class="card-body d-flex flex-column">
        <h6 class="product-title" @onclick="Open" role="button" tabindex="0">
            @Product.Name
        </h6>

        <div class="product-price mb-3">
            @if (Product.PriceTo.HasValue && Product.PriceTo > Product.PriceFrom)
            {
                <div class="price-range">
                    <span class="price-from">@Product.PriceFrom.ToString("N2", es) €</span>
                    <span class="price-separator">-</span>
                    <span class="price-to">@Product.PriceTo?.ToString("N2", es) €</span>
                </div>
            }
            else
            {
                <span class="price-single">@Product.PriceFrom.ToString("N2", es) €</span>
            }
        </div>

        <div class="mt-auto product-actions">
            <!-- Quantity and Add to Cart - Mobile Optimized -->
            <div class="quantity-section mb-2">
                <QuantityStepper Value="qty" ValueChanged="(v) => qty = v" />
            </div>

            <div class="action-buttons">
                <button class="btn btn-danger btn-add-cart @(isAdding ? "adding" : "")"
                        @onclick="Add"
                        disabled="@isAdding"
                        aria-label="Añadir @Product.Name al carrito">
                    @if (isAdding)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        <span>Añadiendo...</span>
                    }
                    else
                    {
                        <i class="bi bi-cart-plus me-1"></i>
                        <span class="d-none d-sm-inline">Añadir</span>
                    }
                </button>

                <button class="btn btn-outline-secondary btn-view"
                        @onclick="Open"
                        aria-label="Ver detalles de @Product.Name">
                    <i class="bi bi-eye"></i>
                    <span class="d-none d-md-inline ms-1">Ver</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Product Product { get; set; } = default!;
    private int qty = 1;
    private bool isAdding = false;
    private readonly CultureInfo es = CultureInfo.GetCultureInfo("es-ES");

    private async Task Add()
    {
        if (qty < 1) qty = 1;
        isAdding = true;
        try
        {
            await Cart.Add(Product, qty);
            // Feedback visual breve
            await Task.Delay(300);
        }
        finally
        {
            isAdding = false;
        }
    }

    private void Open() { Nav.NavigateTo($"/producto/{Product.Slug}"); }
}