@inject CategoryService Categories
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Routing
@using System.Text.RegularExpressions

<div class="card category-sidebar">
    <div class="card-header">
        <span>Catálogo</span>
        <button class="btn btn-sm btn-catalog-toggle d-lg-none"
                type="button"
                @onclick="ToggleMobileMenu"
                aria-label="Alternar categorías">
            <div class="catalog-toggle-icon @(showMobileMenu ? "open" : "")">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </button>
    </div>

    <div class="list-group list-group-flush sidebar-accordion @(showMobileMenu ? "show-mobile" : "hide-mobile")">
        <!-- Todos los Productos -->
        <a class="list-group-item list-group-item-action @(IsAllProductsActive() ? "active" : "")"
           href="/catalogo">
            <i class="bi bi-grid me-2"></i>
            Todos los Productos
        </a>

        <!-- Familias y Subfamilias -->
        @foreach (var fam in families)
        {
            var isOpen = openFamilies.Contains(fam.Slug) || IsActiveFamily(fam.Slug);

            <div class="list-group-item p-0 family-group">
                <!-- Header de Familia: Link + Botón Expandir -->
                <div class="family-header">
                    <!-- Link a la familia -->
                    <a href="@($"/categoria/{fam.Slug}")"
                       class="fam-link @(IsActiveFamily(fam.Slug) ? "active-family" : "")">
                        <i class="bi bi-tag me-2"></i>
                        <span class="family-name">@fam.Name</span>
                    </a>

                    <!-- Botón para expandir/colapsar subfamilias -->
                    @if (fam.Subs.Any())
                    {
                        <button type="button"
                                class="expand-btn"
                                @onclick="() => Toggle(fam.Slug)"
                                @onclick:stopPropagation="true"
                                aria-expanded="@isOpen"
                                aria-label="@(isOpen ? "Colapsar" : "Expandir") subfamilias">
                            <i class="bi bi-chevron-@(isOpen ? "down" : "right")"></i>
                        </button>
                    }
                </div>

                <!-- Lista de Subfamilias (Colapsable) -->
                @if (fam.Subs.Any())
                {
                    <div class="subfamily-list @(isOpen ? "show" : "")">
                        <ul class="list-unstyled mb-0">
                            @foreach (var s in fam.Subs)
                            {
                                <li class="subfamily-item">
                                    <a class="subfamily-link @(IsActive(fam.Slug, s.Slug) ? "active" : "")"
                                       href="@($"/categoria/{fam.Slug}/{s.Slug}")">
                                        <i class="bi bi-circle-fill me-2" style="font-size: 0.35rem;"></i>
                                        <span>@s.Name</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Category> families = new();
    private HashSet<string> openFamilies = new(StringComparer.OrdinalIgnoreCase);
    private bool showMobileMenu = false;

    protected override async Task OnInitializedAsync()
    {
        families = await Categories.GetFamilies();
        ExpandActiveFromUri(Nav.Uri);
        Nav.LocationChanged += OnLocationChanged;
    }

    private void Toggle(string slug)
    {
        if (!openFamilies.Add(slug))
            openFamilies.Remove(slug);
        StateHasChanged();
    }

    private void ToggleMobileMenu()
    {
        showMobileMenu = !showMobileMenu;
        StateHasChanged();
    }

    private bool IsAllProductsActive()
        => Nav.Uri.EndsWith("/catalogo", StringComparison.OrdinalIgnoreCase);

    private bool IsActive(string fam, string sub)
        => Nav.Uri.Contains($"/categoria/{fam}/{sub}", StringComparison.OrdinalIgnoreCase);

    private bool IsActiveFamily(string fam)
        => Nav.Uri.Contains($"/categoria/{fam}", StringComparison.OrdinalIgnoreCase)
           && !Nav.Uri.Contains($"/categoria/{fam}/", StringComparison.OrdinalIgnoreCase);

    private void OnLocationChanged(object? s, LocationChangedEventArgs e)
    {
        ExpandActiveFromUri(e.Location);
        showMobileMenu = false;
        StateHasChanged();
    }

    private void ExpandActiveFromUri(string uri)
    {
        var m = Regex.Match(uri, @"/categoria/([^/]+)", RegexOptions.IgnoreCase);
        if (m.Success)
        {
            openFamilies.Add(m.Groups[1].Value);
        }
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
    }
}