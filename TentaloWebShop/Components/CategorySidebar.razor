@inject CategoryService Categories
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Routing
@using System.Text.RegularExpressions

<div class="card category-sidebar">
    <div class="card-header bg-white fw-bold d-flex justify-content-between align-items-center">
        <span>Catálogo</span>
        <button class="btn btn-sm btn-catalog-toggle d-lg-none"
                @onclick="ToggleMobileMenu"
                aria-label="Alternar categorías">
            <div class="catalog-toggle-icon @(showMobileMenu ? "open" : "")">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </button>
    </div>

    <div class="list-group list-group-flush sidebar-accordion @(showMobileMenu ? "show-mobile" : "hide-mobile")">
        <a class="list-group-item list-group-item-action @(IsAllProducts() ? "active" : "")"
           href="/catalogo">
            <i class="bi bi-grid me-2"></i>Todos los Productos
        </a>

        @foreach (var fam in families)
        {
            var isOpen = openFamilies.Contains(fam.Slug) || IsActiveFamily(fam.Slug);
            var isActiveFamily = IsActiveFamily(fam.Slug) && !IsActiveSubfamily();

            <div class="list-group-item p-0 family-group">
                <!-- Contenedor de la familia -->
                <div class="family-header">
                    <!-- Link a la familia (área principal) -->
                    <a href="/categoria/@fam.Slug"
                       class="fam-link @(isActiveFamily ? "active-family" : "")"
                       @onclick="() => CloseMobileMenu()"
                       @onclick:preventDefault="false">
                        <i class="bi bi-tag me-2"></i>
                        <span class="family-name">@fam.Name</span>
                    </a>

                    <!-- Botón de expansión/colapso -->
                    @if (fam.Subs.Any())
                    {
                        <button type="button"
                                class="expand-btn"
                                @onclick="() => Toggle(fam.Slug)"
                                aria-expanded="@isOpen"
                                aria-label="@(isOpen ? "Contraer" : "Expandir") subcategorías"
                                aria-controls="@($"sub-{fam.Slug}")">
                            <i class="bi bi-chevron-@(isOpen ? "down" : "right")"></i>
                        </button>
                    }
                </div>

                <!-- Subfamilias (plegable) -->
                @if (fam.Subs.Any())
                {
                    <div id="@($"sub-{fam.Slug}")"
                         class="@($"collapse subfamily-list {(isOpen ? "show" : "")}")">
                        <ul class="list-unstyled ps-3 py-2 mb-0">
                            @foreach (var s in fam.Subs)
                            {
                                <li class="mb-1 subfamily-item">
                                    <a class="subfamily-link @(IsActive(fam.Slug, s.Slug) ? "active" : "")"
                                       href="/categoria/@fam.Slug/@s.Slug"
                                       @onclick="() => CloseMobileMenu()">
                                        <i class="bi bi-circle-fill me-2"></i>
                                        @s.Name
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Category> families = new();
    private HashSet<string> openFamilies = new();
    private bool showMobileMenu;

    protected override async Task OnInitializedAsync()
    {
        families = await Categories.GetFamilies();
        Nav.LocationChanged += OnLocationChanged;

        // Abrir la familia activa al cargar
        var currentFamily = GetCurrentFamily();
        if (!string.IsNullOrEmpty(currentFamily))
        {
            openFamilies.Add(currentFamily);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void Toggle(string slug)
    {
        if (openFamilies.Contains(slug))
            openFamilies.Remove(slug);
        else
            openFamilies.Add(slug);
    }

    private void ToggleMobileMenu()
    {
        showMobileMenu = !showMobileMenu;
    }

    private void CloseMobileMenu()
    {
        showMobileMenu = false;
    }

    private bool IsAllProducts()
    {
        var path = new Uri(Nav.Uri).AbsolutePath;
        return path == "/catalogo";
    }

    private bool IsActiveFamily(string familySlug)
    {
        var path = new Uri(Nav.Uri).AbsolutePath;
        var pattern = $"/categoria/{Regex.Escape(familySlug)}";
        return Regex.IsMatch(path, pattern, RegexOptions.IgnoreCase);
    }

    private bool IsActiveSubfamily()
    {
        var path = new Uri(Nav.Uri).AbsolutePath;
        var parts = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
        // Tiene subcategoría si tiene más de 2 partes después de categoria
        return parts.Length >= 3 && parts[0] == "categoria";
    }

    private bool IsActive(string familySlug, string subSlug)
    {
        var path = new Uri(Nav.Uri).AbsolutePath;
        var expected = $"/categoria/{familySlug}/{subSlug}";
        return path.Equals(expected, StringComparison.OrdinalIgnoreCase);
    }

    private string? GetCurrentFamily()
    {
        var path = new Uri(Nav.Uri).AbsolutePath;
        var match = Regex.Match(path, @"/categoria/([^/]+)", RegexOptions.IgnoreCase);
        return match.Success ? match.Groups[1].Value : null;
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
    }
}