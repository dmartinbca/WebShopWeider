@inject LoadingService Loading
@implements IDisposable

@if (Loading.IsLoading)
{
    <div class="loading-overlay">
        <div class="loading-spinner">
            <div class="spinner-border text-danger" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-white fw-semibold">Cargando datos...</p>
        </div>
    </div>
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        backdrop-filter: blur(2px);
    }

    .loading-spinner {
        text-align: center;
        background: rgba(33, 37, 41, 0.9);
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }

    .spinner-border {
        width: 50px;
        height: 50px;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        Loading.OnLoadingChanged += OnLoadingChanged;
    }

    private void OnLoadingChanged()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Loading.OnLoadingChanged -= OnLoadingChanged;
    }
}
