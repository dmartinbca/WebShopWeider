@page "/facturas"
@inject InvoiceService InvoiceService
@inject AuthService Auth
@inject NavigationManager Nav
@using TentaloWebShop.Models

<PageTitle>Mis Facturas</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="mb-0">
                    <i class="bi bi-receipt me-2"></i>
                    Mis Facturas
                </h1>
                <button class="btn btn-outline-success" @onclick="RefreshInvoices">
                    <i class="bi bi-arrow-clockwise me-2"></i>
                    Actualizar
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando facturas...</p>
        </div>
    }
    else if (!invoices.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-receipt-cutoff"></i>
            </div>
            <h3>No hay facturas</h3>
            <p class="text-muted">Aún no tienes facturas registradas.</p>
            <a href="/pedidos" class="btn btn-success">
                <i class="bi bi-bag-check me-2"></i>
                Ver Pedidos
            </a>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var invoice in invoices.OrderByDescending(o => o.Order_Date))
            {
                <div class="col-12">
                    <div class="invoice-card" @onclick="() => ViewInvoice(invoice.No)">
                        <div class="invoice-header">
                            <div class="invoice-info">
                                <div class="invoice-number">
                                    <i class="bi bi-receipt me-2"></i>
                                    Factura #@invoice.No
                                </div>
                                <div class="invoice-date">
                                    @DateTime.TryParse(invoice.Order_Date, out var invoiceDate)
                                    @(invoiceDate != default ? invoiceDate.ToString("dd/MM/yyyy") : invoice.Order_Date)
                                </div>
                            </div>
                            <div class="invoice-status">
                                <span class="status-badge status-@GetStatusClass(invoice.Status)">
                                    @GetStatusText(invoice.Status)
                                </span>
                            </div>
                        </div>

                        <div class="invoice-details">
                            <div class="invoice-summary">
                                <div class="summary-item">
                                    <i class="bi bi-box me-2"></i>
                                    <span>@InvoiceService.GetOrderLineCount(invoice) artículos</span>
                                </div>
                                <div class="summary-item">
                                    <i class="bi bi-geo-alt me-2"></i>
                                    <span>@(!string.IsNullOrEmpty(invoice.Sell_to_City) ? invoice.Sell_to_City : "Dirección no especificada")</span>
                                </div>
                                @if (DateTime.TryParse(invoice.Posting_Date, out var postingDate))
                                {
                                    <div class="summary-item">
                                        <i class="bi bi-calendar-check me-2"></i>
                                        <span>Contabilizada: @postingDate.ToString("dd/MM/yyyy")</span>
                                    </div>
                                }
                            </div>

                            <div class="invoice-amount">
                                <div class="amount-label">Total</div>
                                <div class="amount-value">@InvoiceService.GetOrderTotal(invoice).ToString("N2") €</div>
                            </div>
                        </div>

                        <div class="invoice-footer">
                            <button class="btn btn-outline-success btn-sm">
                                <i class="bi bi-eye me-2"></i>
                                Ver Detalle
                            </button>
                            <button class="btn btn-outline-secondary btn-sm ms-2" @onclick:stopPropagation="true" @onclick="() => DownloadInvoice(invoice.No)">
                                <i class="bi bi-download me-2"></i>
                                Descargar PDF
                            </button>
                            @if (invoice.Status?.ToLower() != "paid")
                            {
                                <button class="btn btn-success btn-sm ms-2" @onclick:stopPropagation="true" @onclick="() => PayInvoice(invoice.No)">
                                    <i class="bi bi-credit-card me-2"></i>
                                    Pagar
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<OrderNAVCabecera> invoices = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        isLoading = true;
        try
        {
            var customerNo = Auth.CurrentUser?.CustomerNo ?? "";
            if (string.IsNullOrEmpty(customerNo))
            {
                Nav.NavigateTo("/login");
                return;
            }

            invoices = await InvoiceService.GetOrdersAsync(customerNo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading invoices: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshInvoices()
    {
        InvoiceService.ClearCache();
        await LoadInvoices();
    }

    private void ViewInvoice(string invoiceNo)
    {
        Nav.NavigateTo($"/factura/{invoiceNo}");
    }

    private async Task DownloadInvoice(string invoiceNo)
    {
        Console.WriteLine($"Descargando factura: {invoiceNo}");
        // Implementar descarga de factura PDF
    }

    private async Task PayInvoice(string invoiceNo)
    {
        Console.WriteLine($"Iniciando pago para factura: {invoiceNo}");
        // Implementar proceso de pago
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "pending",
            "released" => "released",
            "paid" => "paid",
            "cancelled" => "cancelled",
            "overdue" => "overdue",
            _ => "unknown"
        };
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "Abierta",
            "released" => "Liberada",
            "paid" => "Pagada",
            "cancelled" => "Cancelada",
            "overdue" => "Vencida",
            _ => status ?? "Abierta"
        };
    }
}