@page "/facturas"
@inject InvoiceService InvoiceService
@inject AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using TentaloWebShop.Models

<PageTitle>Mis Facturas</PageTitle>

<!-- Header fijo arriba -->
<div class="facturas-header-fixed">
    <div class="facturas-header-content">
        <h1>
            <i class="bi bi-receipt"></i>
            Mis Facturas
        </h1>
        <button class="btn-refresh" @onclick="RefreshInvoices" disabled="@isLoading">
            <i class="bi bi-arrow-clockwise"></i>
        </button>
    </div>
</div>

<div class="container-fluid px-0">

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando facturas...</p>
        </div>
    }
    else if (!invoices.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-receipt-cutoff"></i>
            </div>
            <h3>No hay facturas</h3>
            <p class="text-muted">Aún no tienes facturas registradas.</p>
            <a href="/pedidos" class="btn btn-primary">
                <i class="bi bi-bag-check me-2"></i>
                Ver Pedidos
            </a>
        </div>
    }
    else
    {
        <div class="facturas-list">
            @foreach (var invoice in invoices.OrderByDescending(o => o.Order_Date))
            {
                var isDownloadingThis = downloadingInvoices.Contains(invoice.No);

                <div class="invoice-card" @onclick="() => ViewInvoice(invoice.No)">
                    <!-- Header de la factura -->
                    <div class="invoice-header">
                        <div class="invoice-info">
                            <div class="invoice-number">
                                <i class="bi bi-receipt"></i>
                                Factura #@invoice.No
                            </div>
                            <div class="invoice-date">
                                @DateTime.TryParse(invoice.Order_Date, out var invoiceDate)
                                @(invoiceDate != default ? invoiceDate.ToString("dd/MM/yyyy") : invoice.Order_Date)
                            </div>
                        </div>
                        <div class="invoice-status">
                            <span class="status-badge status-@GetStatusClass(invoice.Status)">
                                @GetStatusText(invoice.Status)
                            </span>
                        </div>
                    </div>

                    <!-- Detalles de la factura -->
                    <div class="invoice-details">
                        <div class="invoice-summary">
                            <div class="summary-item">
                                <i class="bi bi-box"></i>
                                <span>@InvoiceService.GetOrderLineCount(invoice) artículos</span>
                            </div>
                            <div class="summary-item">
                                <i class="bi bi-geo-alt"></i>
                                <span>@(!string.IsNullOrEmpty(invoice.Sell_to_City) ? invoice.Sell_to_City : "Dirección no especificada")</span>
                            </div>
                        </div>

                        <div class="invoice-amount">
                            <div class="amount-label">Total</div>
                            <div class="amount-value">@invoice.Amount_Including_VAT.ToString("N2") €</div>
                        </div>
                    </div>

                    <!-- Footer con botones -->
                    <div class="invoice-footer">
                        <button class="btn btn-outline-primary" @onclick="() => ViewInvoice(invoice.No)">
                            <i class="bi bi-eye me-2"></i>
                            Ver Detalle
                        </button>
                        <button class="btn btn-outline-success"
                                @onclick:stopPropagation="true"
                                @onclick="() => DownloadInvoice(invoice.No)"
                                disabled="@isDownloadingThis">
                            @if (isDownloadingThis)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Descargando...</span>
                            }
                            else
                            {
                                <i class="bi bi-download me-2"></i>
                                <span>Descargar</span>
                            }
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Mensajes de descarga -->
        @if (!string.IsNullOrEmpty(downloadMessage))
        {
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
                <div class="toast show" role="alert">
                    <div class="toast-header @(downloadSuccess ? "bg-success" : "bg-danger") text-white">
                        <i class="bi @(downloadSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                        <strong class="me-auto">@(downloadSuccess ? "Éxito" : "Error")</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="ClearDownloadMessage"></button>
                    </div>
                    <div class="toast-body">
                        @downloadMessage
                    </div>
                </div>
            </div>
        }
    }
</div>

 <style>
    /* ========================================
       FACTURAS - DISEÑO MEJORADO Y RESPONSIVE
       ======================================== */

    /* Header fijo arriba */
    .facturas-header-fixed {
        position: sticky;
        top: 0;
        left: 0;
        right: 0;
        width: 100%;
        background: white;
        border-bottom: 2px solid #e9ecef;
        z-index: 100;
        padding: 1rem;
        margin: 0;
    }

    .facturas-header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    h1 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        h1 i {
            color: #28a745;
            font-size: 1.5rem;
        }

    /* Botón refresh circular */
    .btn-refresh {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #28a745;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-refresh:hover:not(:disabled) {
            background: #28a745;
            color: white;
            border-color: #28a745;
            transform: rotate(180deg);
        }

    /* Lista de facturas */
    .facturas-list {
        padding: 1rem 0;
    }

    /* Card de factura */
    .invoice-card {
        background: white;
        border-radius: 12px;
        border: 1px solid #e9ecef;
        padding: 1.25rem;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }

        .invoice-card:hover {
            border-color: #28a745;
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.1);
            transform: translateY(-2px);
        }

    /* Header de factura */
    .invoice-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    .invoice-info {
        flex: 1;
    }

    .invoice-number {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
    }

        .invoice-number i {
            color: #28a745;
        }

    .invoice-date {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .invoice-status {
        margin-left: 1rem;
    }

    /* Status badge */
    .status-badge {
        display: inline-block;
        padding: 0.375rem 0.75rem;
        border-radius: 6px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        white-space: nowrap;
    }

    .status-open {
        background: #fff3cd;
        color: #856404;
    }

    .status-released {
        background: #d1ecf1;
        color: #0c5460;
    }

    .status-completed,
    .status-paid {
        background: #d4edda;
        color: #155724;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
    }

    .status-overdue {
        background: #f8d7da;
        color: #721c24;
    }

    /* Detalles de factura */
    .invoice-details {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        gap: 1rem;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    .invoice-summary {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .summary-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: #495057;
    }

        .summary-item i {
            color: #6c757d;
            font-size: 1rem;
        }

    /* Monto de factura */
    .invoice-amount {
        text-align: right;
        flex-shrink: 0;
    }

    .amount-label {
        font-size: 0.75rem;
        color: #6c757d;
        text-transform: uppercase;
        margin-bottom: 0.25rem;
        font-weight: 600;
    }

    .amount-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #28a745;
        white-space: nowrap;
    }

    /* Footer con botones - IGUAL A MISPEDIDOS */
    .order-footer {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

        .order-footer .btn {
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.875rem;
            padding: 0.625rem 1rem;
            transition: all 0.3s ease;
        }

            .order-footer .btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 4rem 1rem;
    }

    .empty-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

        .empty-icon i {
            display: block;
        }

    .empty-state h3 {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .empty-state .text-muted {
        margin-bottom: 1.5rem;
    }

    /* ========================================
       RESPONSIVE - TABLET (768px - 991px)
       ======================================== */

    @@media (max-width: 991.98px) {
        h1 {
            font-size: 1.5rem;
        }

        .invoice-details {
            gap: 0.75rem;
        }

        .summary-item {
            font-size: 0.8rem;
        }

            .summary-item i {
                font-size: 0.875rem;
            }

        .amount-value {
            font-size: 1.375rem;
        }
    }

    /* ========================================
       RESPONSIVE - MOBILE PEQUEÑO ( 576px)
       ======================================== */

    @@media (max-width: 575.98px) {
        .facturas-header-fixed {
            padding: 0.875rem 0.75rem;
        }

        h1 {
            font-size: 1.125rem;
        }

            h1 i {
                font-size: 0.95rem;
            }

        .btn-refresh {
            width: 34px;
            height: 34px;
            font-size: 0.95rem;
        }

        .facturas-list {
            padding: 0.75rem 0.5rem;
        }

        .invoice-card {
            padding: 0.875rem;
        }

        .invoice-number {
            font-size: 0.9rem;
        }

        .invoice-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .invoice-status {
            margin-left: 0;
            align-self: flex-start;
        }

        /* Detalles en columna */
        .invoice-details {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
        }

        .invoice-summary {
            order: 2;
        }

        .invoice-amount {
            order: 1;
            text-align: left;
            padding: 0.75rem;
            background: #f8f9fa;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .amount-label {
            margin-bottom: 0;
        }

        .amount-value {
            font-size: 1.25rem;
        }

        .summary-item {
            font-size: 0.75rem;
        }

        /* Footer con botones en columna */
        .order-footer {
            flex-direction: column;
            gap: 0.5rem;
        }

            .order-footer .btn {
                width: 100%;
                justify-content: center;
                font-size: 0.8rem;
                padding: 0.5rem 0.75rem;
            }

        .empty-icon {
            font-size: 3rem;
        }

        .empty-state h3 {
            font-size: 1.25rem;
        }
    }

    /* ========================================
       TOAST NOTIFICATIONS
       ======================================== */

    .toast {
        min-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .toast-header {
        border-bottom: none;
    }

    .toast-body {
        padding: 1rem;
    }

    @@media (max-width: 575.98px) {
        .toast {
            min-width: 250px;
        }
    }
</style>

@code {
    [Inject] protected IApiService Api { get; set; } = default!;

    private List<OrderNAVCabecera> invoices = new();
    private bool isLoading = true;
    private string downloadMessage = "";
    private bool downloadSuccess = false;
    private HashSet<string> downloadingInvoices = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        isLoading = true;
        try
        {
            if (!Auth.IsAuthenticated)
            {
                Nav.NavigateTo("/login");
                return;
            }

         
            invoices = await InvoiceService.GetOrdersAsync() ?? new List<OrderNAVCabecera>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading invoices: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshInvoices()
    {
        await LoadInvoices();
    }

    private void ViewInvoice(string invoiceNo)
    {
        Nav.NavigateTo($"/factura/{invoiceNo}");
    }

    private async Task DownloadInvoice(string invoiceNo)
    {
        if (downloadingInvoices.Contains(invoiceNo)) return;

        downloadingInvoices.Add(invoiceNo);
        downloadMessage = "";

        try
        {
            var payload = new { numero = invoiceNo };
            var respCR = await Api.PostAsync(
                   "customReports(1)/Microsoft.NAV.GenerateInvoiceWithLayout",
                   payload);

            if (respCR.IsSuccessStatusCode)
            {
                var jsonCR = await respCR.Content.ReadAsStringAsync();
                using var docCR = JsonDocument.Parse(jsonCR);
                var rootCR = docCR.RootElement;
                string? b64CR = null;

                if (rootCR.TryGetProperty("data", out var dataElCR) &&
                    dataElCR.TryGetProperty("value", out var valueElCR))
                {
                    b64CR = valueElCR.GetString();
                }
                else if (rootCR.TryGetProperty("value", out var valueEl2CR))
                {
                    b64CR = valueEl2CR.GetString();
                }

                if (!string.IsNullOrWhiteSpace(b64CR))
                {
                    var fileName = $"Factura_{invoiceNo}_{DateTime.Now:yyyyMMdd}.pdf";
                    await JSRuntime.InvokeVoidAsync("fileDownload.downloadFromBase64",
                        b64CR,
                        fileName,
                        "application/pdf");

                    downloadMessage = $"Factura {invoiceNo} descargada correctamente";
                    downloadSuccess = true;

                    _ = Task.Delay(4000).ContinueWith(_ =>
                    {
                        downloadMessage = "";
                        InvokeAsync(StateHasChanged);
                    });
                }
                else
                {
                    downloadMessage = $"No se pudo generar el PDF de la factura {invoiceNo}";
                    downloadSuccess = false;
                }
            }
            else
            {
                downloadMessage = $"Error al generar el PDF: {respCR.StatusCode}";
                downloadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading invoice {invoiceNo}: {ex.Message}");
            downloadMessage = $"Error al descargar la factura {invoiceNo}. Inténtalo de nuevo.";
            downloadSuccess = false;
        }
        finally
        {
            downloadingInvoices.Remove(invoiceNo);
            StateHasChanged();
        }
    }

    private void ClearDownloadMessage()
    {
        downloadMessage = "";
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "open",
            "released" => "released",
            "paid" => "paid",
            "cancelled" => "cancelled",
            "overdue" => "overdue",
            _ => "pending"
        };
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "Abierta",
            "released" => "Liberada",
            "paid" => "Pagada",
            "cancelled" => "Cancelada",
            "overdue" => "Vencida",
            _ => "Abierta"
        };
    }
}
