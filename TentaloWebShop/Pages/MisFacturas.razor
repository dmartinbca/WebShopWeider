@page "/facturas"
@inject InvoiceService InvoiceService
@inject AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using TentaloWebShop.Models

<PageTitle>Mis Facturas</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="mb-0">
                    <i class="bi bi-receipt me-2"></i>
                    Mis Facturas
                </h1>
                <button class="btn btn-outline-success" @onclick="RefreshInvoices" disabled="@isLoading">
                    <i class="bi bi-arrow-clockwise me-2"></i>
                    Actualizar
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando facturas...</p>
        </div>
    }
    else if (!invoices.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-receipt-cutoff"></i>
            </div>
            <h3>No hay facturas</h3>
            <p class="text-muted">Aún no tienes facturas registradas.</p>
            <a href="/pedidos" class="btn btn-success">
                <i class="bi bi-bag-check me-2"></i>
                Ver Pedidos
            </a>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var invoice in invoices.OrderByDescending(o => o.Order_Date))
            {
                var isDownloadingThis = downloadingInvoices.Contains(invoice.No);

                <div class="col-12">
                    <div class="invoice-card" @onclick="() => ViewInvoice(invoice.No)">
                        <div class="invoice-header">
                            <div class="invoice-info">
                                <div class="invoice-number">
                                    <i class="bi bi-receipt me-2"></i>
                                    Factura #@invoice.No
                                </div>
                                <div class="invoice-date">
                                    @DateTime.TryParse(invoice.Order_Date, out var invoiceDate)
                                    @(invoiceDate != default ? invoiceDate.ToString("dd/MM/yyyy") : invoice.Order_Date)
                                </div>
                            </div>
                            <div class="invoice-status">
                                <span class="status-badge status-@GetStatusClass(invoice.Status)">
                                    @GetStatusText(invoice.Status)
                                </span>
                            </div>
                        </div>

                        <div class="invoice-details">
                            <div class="invoice-summary">
                                <div class="summary-item">
                                    <i class="bi bi-box me-2"></i>
                                    <span>@InvoiceService.GetOrderLineCount(invoice) artículos</span>
                                </div>
                                <div class="summary-item">
                                    <i class="bi bi-geo-alt me-2"></i>
                                    <span>@(!string.IsNullOrEmpty(invoice.Sell_to_City) ? invoice.Sell_to_City : "Dirección no especificada")</span>
                                </div>
                                @if (DateTime.TryParse(invoice.Posting_Date, out var postingDate))
                                {
                                    <div class="summary-item">
                                        <i class="bi bi-calendar-check me-2"></i>
                                        <span>Contabilizada: @postingDate.ToString("dd/MM/yyyy")</span>
                                    </div>
                                }
                            </div>

                            <div class="invoice-amount">
                                <div class="amount-label">Total</div>
                                <div class="amount-value">@InvoiceService.GetOrderTotal(invoice).ToString("N2") €</div>
                            </div>
                        </div>

                        <div class="invoice-footer">
                            <button class="btn btn-outline-success btn-sm">
                                <i class="bi bi-eye me-2"></i>
                                Ver Detalle
                            </button>
                            <button class="btn btn-outline-secondary btn-sm ms-2"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => DownloadInvoice(invoice.No)"
                                    disabled="@isDownloadingThis">
                                @if (isDownloadingThis)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Descargando...</span>
                                }
                                else
                                {
                                    <i class="bi bi-download me-2"></i>
                                    <span>Descargar PDF</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Mensajes de descarga -->
        @if (!string.IsNullOrEmpty(downloadMessage))
        {
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
                <div class="toast show" role="alert">
                    <div class="toast-header @(downloadSuccess ? "bg-success" : "bg-danger") text-white">
                        <i class="bi @(downloadSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                        <strong class="me-auto">@(downloadSuccess ? "Éxito" : "Error")</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="ClearDownloadMessage"></button>
                    </div>
                    <div class="toast-body">
                        @downloadMessage
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Inject] protected IApiService Api { get; set; } = default!;

    private List<OrderNAVCabecera> invoices = new();
    private bool isLoading = true;
    private HashSet<string> downloadingInvoices = new();
    private string downloadMessage = "";
    private bool downloadSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        isLoading = true;
        try
        {
            // ✅ CORREGIDO: Verificar autenticación, no customerNo específico
            if (!Auth.IsAuthenticated)
            {
                Nav.NavigateTo("/login");
                return;
            }

            // ✅ CORREGIDO: InvoiceService usa GetEffectiveCustomerNo() internamente
            // No necesitamos pasar customerNo
            invoices = await InvoiceService.GetOrdersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading invoices: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshInvoices()
    {
        InvoiceService.ClearCache();
        await LoadInvoices();
    }

    private void ViewInvoice(string invoiceNo)
    {
        Nav.NavigateTo($"/factura/{invoiceNo}");
    }

    private async Task DownloadInvoice(string invoiceNo)
    {
        downloadingInvoices.Add(invoiceNo);
        downloadMessage = "";

        try
        {
            var payload = new { numero = invoiceNo };
            var respCR = await Api.PostAsync(
                   "customReports(1)/Microsoft.NAV.GenerateInvoiceWithLayout",
                   payload);

            if (respCR.IsSuccessStatusCode)
            {
                var jsonCR = await respCR.Content.ReadAsStringAsync();
                using var docCR = JsonDocument.Parse(jsonCR);
                var rootCR = docCR.RootElement;
                string? b64CR = null;

                if (rootCR.TryGetProperty("data", out var dataElCR) &&
                    dataElCR.TryGetProperty("value", out var valueElCR))
                {
                    b64CR = valueElCR.GetString();
                }
                else if (rootCR.TryGetProperty("value", out var valueEl2CR))
                {
                    b64CR = valueEl2CR.GetString();
                }

                if (!string.IsNullOrWhiteSpace(b64CR))
                {
                    var fileName = $"Factura_{invoiceNo}_{DateTime.Now:yyyyMMdd}.pdf";
                    await JSRuntime.InvokeVoidAsync("fileDownload.downloadFromBase64",
                        b64CR,
                        fileName,
                        "application/pdf");

                    downloadMessage = $"Factura {invoiceNo} descargada correctamente";
                    downloadSuccess = true;

                    // Auto-ocultar mensaje después de 4 segundos
                    _ = Task.Delay(4000).ContinueWith(_ =>
                    {
                        downloadMessage = "";
                        InvokeAsync(StateHasChanged);
                    });
                }
                else
                {
                    downloadMessage = $"No se pudo generar el PDF de la factura {invoiceNo}";
                    downloadSuccess = false;
                }
            }
            else
            {
                downloadMessage = $"Error al generar el PDF: {respCR.StatusCode}";
                downloadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading invoice {invoiceNo}: {ex.Message}");
            downloadMessage = $"Error al descargar la factura {invoiceNo}. Inténtalo de nuevo.";
            downloadSuccess = false;
        }
        finally
        {
            downloadingInvoices.Remove(invoiceNo);
            StateHasChanged();
        }
    }

    private void ClearDownloadMessage()
    {
        downloadMessage = "";
    }

    private async Task PayInvoice(string invoiceNo)
    {
        Console.WriteLine($"Iniciando pago para factura: {invoiceNo}");
        // Implementar proceso de pago
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "pending",
            "released" => "released",
            "paid" => "paid",
            "cancelled" => "cancelled",
            "overdue" => "overdue",
            _ => "unknown"
        };
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "Abierta",
            "released" => "Liberada",
            "paid" => "Pagada",
            "cancelled" => "Cancelada",
            "overdue" => "Vencida",
            _ => status ?? "Abierta"
        };
    }
}
