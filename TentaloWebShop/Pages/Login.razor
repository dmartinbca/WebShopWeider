@page "/login"
@using TentaloWebShop.Shared
@using WeiderShop.Services
@inject AuthService Auth
@inject NavigationManager Nav
@layout AuthLayout
@inject BusyService Busy

<div class="login-wrapper">
    <div class="login-content-wrapper">
        <div class="login-header">
            <h1>Acceder</h1>
            <img src="/images/entradaweider.png" alt="Logo Tentalo" class="login-logo" />
        </div>
        <div class="card" style="max-width:480px">
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <input class="form-control" @bind="email" autocomplete="username" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Contraseña</label>
                    <input type="password" class="form-control" @bind="password" autocomplete="current-password" />
                </div>
                <button type="button"
                        class="btn btn-danger w-100 d-inline-flex align-items-center justify-content-center gap-2"
                        style="min-height: 48px;"
                        disabled="@isBusy"
                        @onclick="DoLogin">
                    @if (isBusy)
                    {
                        <span class="spinner-border spinner-border-sm align-middle"
                              role="status" aria-hidden="true"></span>
                    }
                    <span>@(isBusy ? "Accediendo…" : "Acceder")</span>
                </button>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0" role="alert">
                        <i class="bi bi-exclamation-circle me-2"></i>
                        @error
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .login-wrapper {
        position: relative;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        overflow: hidden;
        background-color: #ffffff;
    }

    .login-content-wrapper {
        position: relative;
        z-index: 1;
        width: 100%;
        max-width: none;
    }

    .login-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

        .login-header h1 {
            font-size: 2rem;
            font-weight: 700;
            color: #2c3e50;
            margin: 0;
            white-space: nowrap;
        }

        .login-header .login-logo {
            height: 60px;
            width: auto;
            object-fit: contain;
        }

    .login-content-wrapper .card {
        background-color: rgba(255, 255, 255, 0.95) !important;
        max-width: 450px;
        margin: 0 auto;
        border: 1px solid #e9ecef !important;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08) !important;
    }

    .login-content-wrapper .card-body {
        border: none !important;
        padding: 1.5rem;
    }

    .login-content-wrapper .form-control {
        border: 1px solid #dee2e6 !important;
        box-shadow: none !important;
    }

    .login-content-wrapper .form-label {
        color: #333;
        font-weight: 500;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .login-header

    {
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .login-header h1 {
        font-size: 1.5rem;
    }

    .login-header .login-logo {
        height: 50px;
    }

    }

    @@media (max-width: 480px) {
        .login-wrapper

    {
        padding: 15px;
    }

    .login-header {
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

        .login-header h1 {
            font-size: 1.25rem;
        }

        .login-header .login-logo {
            height: 45px;
        }

    .login-content-wrapper .card {
        max-width: 100%;
    }

    }
</style>

@code {
    string email = "";
    string password = "";
    string? error;
    bool isBusy;

    private async Task DoLogin()
    {
        error = null;
        isBusy = true;
        Busy?.Show("Conectando…");
        try
        {
            var ok = await Auth.LoginAsync(email, password);
            if (ok)
            {
                Nav.NavigateTo("/");
            }
            else
            {
                error = "Credenciales inválidas";
            }
        }
        catch (Exception ex)
        {
            error = "Error de conexión. Inténtalo de nuevo.";
        }
        finally
        {
            isBusy = false;
            Busy?.Hide();
        }
    }
}
