@page "/pedido/{OrderId}"
@inject OrderService OrderService
@inject AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using TentaloWebShop.Models

<PageTitle>Pedido #@OrderId</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando pedido...</p>
        </div>
    }
    else if (order == null)
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-exclamation-triangle"></i>
            </div>
            <h3>Pedido no encontrado</h3>
            <p class="text-muted">El pedido solicitado no existe o no tienes acceso a él.</p>
            <a href="/pedidos" class="btn btn-primary">
                <i class="bi bi-arrow-left me-2"></i>
                Volver a Pedidos
            </a>
        </div>
    }
    else
    {
        <!-- Header del pedido -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/pedidos">Pedidos</a></li>
                                <li class="breadcrumb-item active">Pedido #@order.No</li>
                            </ol>
                        </nav>
                        <h1 class="mb-0">
                            <i class="bi bi-receipt me-2"></i>
                            Pedido #@order.No
                        </h1>
                    </div>
                    <span class="status-badge status-large status-@GetStatusClass(order.Status)">
                        @GetStatusText(order.Status)
                    </span>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <!-- Información del pedido -->
            <div class="col-12 col-lg-8">
                <!-- Cabecera del pedido -->
                <div class="card order-detail-card mb-4">
                    <div class="card-header order-detail-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Información del Pedido
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="bi bi-calendar3"></i>
                                        <span>Fecha de Pedido</span>
                                    </div>
                                    <div class="info-value">
                                        @(DateTime.TryParse(order.Order_Date, out var orderDate) ? orderDate.ToString("dd/MM/yyyy") : order.Order_Date)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="bi bi-calendar-check"></i>
                                        <span>Fecha de Entrega</span>
                                    </div>
                                    <div class="info-value">
                                        @(DateTime.TryParse(order.Expected_Receipt_Date, out var receiptDate) ? receiptDate.ToString("dd/MM/yyyy") : order.Expected_Receipt_Date)
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="bi bi-geo-alt"></i>
                                        <span>Dirección de Entrega</span>
                                    </div>
                                    <div class="info-value">
                                        @order.Sell_to_Address<br />
                                        @order.Sell_to_County<br />
                                        @order.Sell_to_City, @order.Sell_to_Post_Code
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Líneas del pedido -->
                <div class="card order-detail-card">
                    <div class="card-header order-detail-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-ul me-2"></i>
                            Artículos del Pedido
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        @if (GetOrderLines().Any())
                        {
                            <!-- Tabla para Desktop -->
                            <div class="table-responsive d-none d-md-block">
                                <table class="table table-hover order-lines-table">
                                    <thead>
                                        <tr>
                                            <th>Cod.</th>
                                            <th>Descripción</th>
                                            <th class="text-center">Cantidad</th>
                                            <th class="text-end">Precio</th>
                                            <th class="text-end">Desc.</th>
                                            <th class="text-end">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var line in GetOrderLines())
                                        {
                                            <tr>
                                                <td>
                                                    <small>@line.No</small>
                                                </td>
                                                <td>
                                                    <div class="line-description">
                                                        @line.Description
                                                        @if (!string.IsNullOrEmpty(line.Unit_of_Measure))
                                                        {
                                                            <small class="text-muted d-block">Unidad: @line.Unit_of_Measure</small>
                                                        }
                                                    </div>
                                                </td>
                                                <td class="text-center">
                                                    <span class="quantity-badge">@line.Quantity</span>
                                                </td>
                                                <td class="text-end">@line.Unit_Price.ToString("N2") €</td>
                                                <td class="text-end">
                                                    @if (line.Line_Discount_Percent > 0)
                                                    {
                                                        <span class="text-success">@line.Line_Discount_Percent.ToString("N1")%</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td class="text-end">
                                                    <strong>@line.Amount.ToString("N2") €</strong>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Vista móvil sin código de artículo -->
                            <div class="d-md-none mobile-order-lines">
                                @foreach (var line in GetOrderLines())
                                {
                                    <div class="mobile-line-item">
                                        <div class="mobile-line-header">
                                            <div class="mobile-line-description">
                                                <strong>@line.Description</strong>
                                                @if (!string.IsNullOrEmpty(line.Unit_of_Measure))
                                                {
                                                    <small class="text-muted d-block">Unidad: @line.Unit_of_Measure</small>
                                                }
                                            </div>
                                        </div>
                                        <div class="mobile-line-details">
                                            <div class="mobile-line-row">
                                                <span class="mobile-label">Cantidad:</span>
                                                <span class="mobile-value">@line.Quantity</span>
                                            </div>
                                            <div class="mobile-line-row">
                                                <span class="mobile-label">Precio Unit:</span>
                                                <span class="mobile-value">@line.Unit_Price.ToString("N2") €</span>
                                            </div>
                                            @if (line.Line_Discount_Percent > 0)
                                            {
                                                <div class="mobile-line-row">
                                                    <span class="mobile-label">Desc:</span>
                                                    <span class="mobile-value text-success">@line.Line_Discount_Percent.ToString("N1")%</span>
                                                </div>
                                            }
                                            <div class="mobile-line-row mobile-line-total">
                                                <span class="mobile-label">Total:</span>
                                                <span class="mobile-value"><strong>@line.Amount.ToString("N2") €</strong></span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="p-4 text-center text-muted">
                                <i class="bi bi-inbox display-6"></i>
                                <p class="mt-2">No hay líneas de pedido disponibles</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Resumen y totales -->
            <div class="col-12 col-lg-4">
                <div class="card order-detail-card">
                    <div class="card-header order-detail-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-calculator me-2"></i>
                            Resumen del Pedido
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="order-summary">
                            @if (order.Invoice_Discount_Value > 0)
                            {
                                <div class="summary-row">
                                    <span>Subtotal sin descuento:</span>
                                    <span>@CalculateSubtotalBeforeDiscount().ToString("N2") €</span>
                                </div>
                                <div class="summary-row discount">
                                    <span>Descuento en factura (@order.Invoice_Discount_Value.ToString("N1")%):</span>
                                    <span>-@CalculateInvoiceDiscountAmount().ToString("N2") €</span>
                                </div>
                            }
                            <div class="summary-row">
                                <span>Base imponible:</span>
                                <span>@order.Amount.ToString("N2") €</span>
                            </div>
                            <div class="summary-row">
                                <span>IVA:</span>
                                <span>@order.VAT_Amount.ToString("N2") €</span>
                            </div>
                            <hr />
                            <div class="summary-row total">
                                <span>Total:</span>
                                <span>@order.Amount_Including_VAT.ToString("N2") €</span>
                            </div>
                        </div>

                        <div class="order-actions mt-4">
                            <button class="btn btn-primary w-100 mb-2"
                                    @onclick="DownloadOrder"
                                    disabled="@isDownloading">
                                @if (isDownloading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Generando PDF...</span>
                                }
                                else
                                {
                                    <i class="bi bi-download me-2"></i>
                                    <span>Descargar PDF</span>
                                }
                            </button>
                            @if (order.Status?.ToLower() == "open")
                            {
                                <button class="btn btn-outline-danger w-100" @onclick="CancelOrder">
                                    <i class="bi bi-x-circle me-2"></i>
                                    Cancelar Pedido
                                </button>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(downloadMessage))
                        {
                            <div class="alert @(downloadSuccess ? "alert-success" : "alert-danger") mt-3 mb-0" role="alert">
                                <i class="bi @(downloadSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                                @downloadMessage
                            </div>
                        }
                    </div>
                </div>

                <!-- Información adicional -->
                @if (!string.IsNullOrEmpty(order.Usuario_App))
                {
                    <div class="card order-detail-card mt-4">
                        <div class="card-header order-detail-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-person me-2"></i>
                                Información Adicional
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="info-item">
                                <div class="info-label">
                                    <i class="bi bi-person-circle"></i>
                                    <span>Usuario</span>
                                </div>
                                <div class="info-value">@order.Usuario_App</div>
                            </div>
                            @if (!string.IsNullOrEmpty(order.Location_Code))
                            {
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="bi bi-building"></i>
                                        <span>Almacén</span>
                                    </div>
                                    <div class="info-value">@order.Location_Code</div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Inject] protected IApiService Api { get; set; } = default!;
    [Parameter] public string OrderId { get; set; } = "";

    private OrderNAVCabecera? order;
    private bool isLoading = true;
    private bool isDownloading = false;
    private string downloadMessage = "";
    private bool downloadSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        isLoading = true;
        try
        {
            var customerNo = Auth.CurrentUser?.CustomerNo ?? "";
            if (string.IsNullOrEmpty(customerNo))
            {
                Nav.NavigateTo("/login");
                return;
            }

            order = await OrderService.GetOrderByIdAsync(OrderId, customerNo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<OrderNAVLineas> GetOrderLines()
    {
        if (order == null) return new List<OrderNAVLineas>();

        return order.Lines?.ToList() ??
               order.LineasVenta?.ToList() ??
               order.Lineas?.ToList() ??
               new List<OrderNAVLineas>();
    }

    /// <summary>
    /// Calcula el subtotal ANTES del descuento de factura.
    /// Como Amount ya incluye el descuento aplicado, calculamos hacia atrás:
    /// SubtotalSinDescuento = Amount / (1 - (Invoice_Discount_Value / 100))
    /// </summary>
    private double CalculateSubtotalBeforeDiscount()
    {
        if (order == null) return 0;

        if (order.Invoice_Discount_Value > 0)
        {
            // Calculamos el subtotal original antes del descuento
            return order.Amount / (1 - (order.Invoice_Discount_Value / 100));
        }

        return order.Amount;
    }

    /// <summary>
    /// Calcula el importe del descuento de factura.
    /// ImporteDescuento = SubtotalSinDescuento - Amount
    /// </summary>
    private double CalculateInvoiceDiscountAmount()
    {
        if (order == null) return 0;

        return CalculateSubtotalBeforeDiscount() - order.Amount;
    }

    private async Task DownloadOrder()
    {
        isDownloading = true;
        downloadMessage = "";

        try
        {
            var payload = new { numero = OrderId };
            var respCR = await Api.PostAsync(
                   "customReports(1)/Microsoft.NAV.GenerateReportWithLayout",
                   payload);

            if (respCR.IsSuccessStatusCode)
            {
                var jsonCR = await respCR.Content.ReadAsStringAsync();
                using var docCR = JsonDocument.Parse(jsonCR);
                var rootCR = docCR.RootElement;
                string? b64CR = null;

                if (rootCR.TryGetProperty("data", out var dataElCR) &&
                    dataElCR.TryGetProperty("value", out var valueElCR))
                {
                    b64CR = valueElCR.GetString();
                }
                else if (rootCR.TryGetProperty("value", out var valueEl2CR))
                {
                    b64CR = valueEl2CR.GetString();
                }

                if (!string.IsNullOrWhiteSpace(b64CR))
                {
                    var fileName = $"Pedido_{OrderId}_{DateTime.Now:yyyyMMdd}.pdf";
                    await JSRuntime.InvokeVoidAsync("fileDownload.downloadFromBase64",
                        b64CR,
                        fileName,
                        "application/pdf");

                    downloadMessage = "PDF descargado correctamente";
                    downloadSuccess = true;

                    _ = Task.Delay(3000).ContinueWith(_ =>
                    {
                        downloadMessage = "";
                        InvokeAsync(StateHasChanged);
                    });
                }
                else
                {
                    downloadMessage = "No se pudo generar el PDF";
                    downloadSuccess = false;
                }
            }
            else
            {
                downloadMessage = $"Error al generar el PDF: {respCR.StatusCode}";
                downloadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading order: {ex.Message}");
            downloadMessage = "Error al descargar el PDF. Inténtalo de nuevo.";
            downloadSuccess = false;
        }
        finally
        {
            isDownloading = false;
        }
    }

    private async Task CancelOrder()
    {
        Console.WriteLine($"Cancelando pedido: {OrderId}");
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "pending",
            "released" => "released",
            "closed" => "completed",
            "cancelled" => "cancelled",
            _ => "unknown"
        };
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "Abierto",
            "released" => "Liberado",
            "closed" => "Cerrado",
            "cancelled" => "Cancelado",
            _ => status ?? "Desconocido"
        };
    }
}