@page "/pedido/{OrderId}"
@inject OrderService OrderService
@inject AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using TentaloWebShop.Models

<PageTitle>Pedido #@OrderId</PageTitle>

<style>
    /* ========================================
           LAYOUT Y CONTAINER
           ======================================== */

    .pedido-wrapper {
        background: #f8f9fa;
        min-height: 100vh;
        padding: 1.5rem 0;
    }

    .pedido-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    /* ========================================
           HEADER - BREADCRUMB Y TÍTULO
           ======================================== */

    .pedido-header {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .pedido-breadcrumb {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.75rem;
    }

        .pedido-breadcrumb a {
            color: #007bff;
            text-decoration: none;
        }

            .pedido-breadcrumb a:hover {
                text-decoration: underline;
            }

    .pedido-titulo-fila {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .pedido-titulo {
        flex: 1;
        min-width: 200px;
    }

        .pedido-titulo h1 {
            font-size: 1.75rem;
            font-weight: 700;
            color: #2c3e50;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            .pedido-titulo h1 i {
                color: #dc3545;
            }

    .pedido-estado {
        flex-shrink: 0;
    }

    /* ========================================
           CONTENIDO PRINCIPAL - GRID
           ======================================== */

    .pedido-grid {
        display: grid;
        grid-template-columns: 1fr 2.5fr;
        gap: 1.5rem;
    }

    /* ========================================
           SIDEBAR - RESUMEN Y ACCIONES
           ======================================== */

    .pedido-sidebar {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .card-resumen {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .card-header {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        padding: 1rem 1.25rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .card-header i {
            font-size: 1.25rem;
        }

    .card-body {
        padding: 1.5rem;
    }

    /* ========================================
           RESUMEN DEL PEDIDO
           ======================================== */

    .resumen-fila {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        font-size: 0.95rem;
        border-bottom: 1px solid #e9ecef;
    }

        .resumen-fila:last-child {
            border-bottom: none;
        }

        .resumen-fila.total {
            border-top: 2px solid #dee2e6;
            margin-top: 0.75rem;
            padding-top: 1rem;
            font-weight: 700;
            font-size: 1.1rem;
            color: #2c3e50;
        }

        .resumen-fila.descuento .valor {
            color: #dc3545;
        }

    .resumen-label {
        color: #495057;
        flex: 1;
    }

    .resumen-valor {
        color: #2c3e50;
        font-weight: 600;
        text-align: right;
    }

    /* ========================================
           BOTONES DE ACCIÓN
           ======================================== */

    .acciones {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

        .acciones .btn {
            width: 100%;
            font-weight: 600;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
        }

        .acciones .btn-primary {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
        }

            .acciones .btn-primary:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 86, 179, 0.3);
            }

        .acciones .btn-outline {
            background: white;
            color: #dc3545;
            border: 2px solid #dc3545;
        }

            .acciones .btn-outline:hover:not(:disabled) {
                background: #dc3545;
                color: white;
            }

        .acciones .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    /* ========================================
           CONTENIDO PRINCIPAL
           ======================================== */

    .pedido-contenido {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* ========================================
           INFO DEL PEDIDO
           ======================================== */

    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .info-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .info-label {
        font-size: 0.85rem;
        color: #6c757d;
        text-transform: uppercase;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .info-label i {
            color: #007bff;
        }

    .info-valor {
        font-size: 0.95rem;
        color: #2c3e50;
        font-weight: 500;
    }

    .info-item.full {
        grid-column: 1 / -1;
    }

    /* ========================================
           TABLA DE ARTÍCULOS - DESKTOP
           ======================================== */

    /* BASE: Tabla oculta por defecto */
    .tabla-responsive {
        display: none !important;
        overflow-x: auto;
    }

    /* MOSTRAR tabla SOLO en desktop (≥768px) */
    @@media (min-width: 768px) {
        .tabla-responsive {
            display: block !important;
        }
    }

    /* Ajustes para Tablet (768px - 991px) - Ocultar Precio Unitario */
    @@media (min-width: 768px) and (max-width: 991.98px) {
        .tabla-articulos th:nth-child(4),
        .tabla-articulos td:nth-child(4) {
            display: none;
        }

        .tabla-articulos th,
        .tabla-articulos td {
            padding: 0.75rem 0.5rem;
            font-size: 0.85rem;
        }

        .codigo {
            font-size: 0.8rem;
        }

        .descripcion {
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    }

    .tabla-articulos {
        width: 100%;
        border-collapse: collapse;
        margin: 0;
    }

        .tabla-articulos thead {
            background: #f8f9fa;
        }

        .tabla-articulos th {
            padding: 1rem 0.75rem;
            text-align: left;
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
            font-size: 0.875rem;
        }

        .tabla-articulos td {
            padding: 1rem 0.75rem;
            border-bottom: 1px solid #e9ecef;
            font-size: 0.9rem;
        }

        .tabla-articulos tbody tr:hover {
            background: #f8f9fa;
        }

    .codigo {
        font-weight: 700;
        color: #2c3e50;
        font-family: 'Courier New', monospace;
        font-size: 0.85rem;
    }

    .descripcion {
        color: #495057;
    }

    .cantidad {
        text-align: center;
        font-weight: 600;
        color: #2c3e50;
    }

    .precio {
        text-align: right;
        color: #6c757d;
    }

    .total {
        text-align: right;
        font-weight: 700;
        color: #dc3545;
        white-space: nowrap;
        min-width: 60px;
    }

    /* ========================================
           CARDS ARTÍCULOS - MOBILE
           ======================================== */

    /* BASE: Cards ocultas por defecto */
    .articulos-mobile {
        display: none !important;
        flex-direction: column;
        gap: 1rem;
    }

    /* MOSTRAR cards SOLO en móvil (768px) */
    @@media (max-width: 767.98px) {
        .articulos-mobile {
            display: flex !important;
        }
    }

    .articulo-card {
        background: white;
        border-radius: 8px;
        border-left: 4px solid #007bff;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .articulo-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 0.75rem;
        margin-bottom: 0.75rem;
    }

    .articulo-codigo {
        font-weight: 700;
        color: #2c3e50;
        font-size: 0.85rem;
        font-family: 'Courier New', monospace;
    }

    .articulo-total {
        font-weight: 700;
        color: #dc3545;
        font-size: 1.1rem;
    }

    .articulo-desc {
        color: #495057;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .articulo-detalles {
        font-size: 0.85rem;
        color: #6c757d;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    /* ========================================
           ALERTAS
           ======================================== */

    .alert {
        padding: 0.875rem 1rem;
        border-radius: 8px;
        border-left: 4px solid;
        margin-top: 1rem;
    }

    .alert-success {
        background: #d4edda;
        border-color: #28a745;
        color: #155724;
    }

    .alert-danger {
        background: #f8d7da;
        border-color: #dc3545;
        color: #721c24;
    }

    /* ========================================
           EMPTY STATE
           ======================================== */

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }

    .empty-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

    .empty-state h3 {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    /* ========================================
           RESPONSIVE - TABLET (768px - 991px)
           ======================================== */

    @@media (max-width: 991.98px) {
        .pedido-grid {
            grid-template-columns: 1fr;
        }

        .pedido-header {
            padding: 1.25rem;
        }

        .pedido-titulo h1 {
            font-size: 1.5rem;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }
    }

    /* ========================================
           RESPONSIVE - MOBILE (max-width: 767.98px)
           ======================================== */

    @@media (max-width: 767.98px) {
        .pedido-wrapper {
            padding: 1rem 0;
        }

        .pedido-container {
            padding: 0 0.75rem;
        }

        .pedido-header {
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .pedido-titulo-fila {
            flex-direction: column;
            gap: 0.75rem;
        }

        .pedido-titulo h1 {
            font-size: 1.25rem;
        }

        .pedido-estado {
            width: 100%;
        }

        .pedido-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .card-resumen {
            border-radius: 10px;
        }

        .card-body {
            padding: 1rem;
        }

        .acciones .btn {
            padding: 0.625rem 0.875rem;
            font-size: 0.9rem;
        }

        /* Las vistas de tabla y cards se manejan arriba con display: none/flex !important */

        .info-grid {
            grid-template-columns: 1fr;
            gap: 0.75rem;
        }
    }

    /* ========================================
           RESPONSIVE - MOBILE PEQUEÑO (max-width: 575.98px)
           ======================================== */

    @@media (max-width: 575.98px) {
        .pedido-container {
            padding: 0 0.5rem;
        }

        .pedido-header {
            padding: 0.875rem;
        }

        .pedido-titulo h1 {
            font-size: 1.1rem;
        }

        .card-body {
            padding: 0.875rem;
        }

        .resumen-fila {
            font-size: 0.85rem;
            padding: 0.5rem 0;
        }

        .resumen-valor {
            font-size: 0.9rem;
        }

        .articulo-card {
            padding: 0.875rem;
        }

        .articulo-total {
            font-size: 1rem;
        }
    }

    /* ========================================
           SPINNER
           ======================================== */

    .spinner-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 3rem 1rem;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<div class="pedido-wrapper">
    <div class="pedido-container">
        @if (isLoading)
        {
            <div class="spinner-container">
                <div class="spinner"></div>
            </div>
        }
        else if (order == null)
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-exclamation-triangle"></i>
                </div>
                <h3>Pedido no encontrado</h3>
                <p style="color: #6c757d; margin-bottom: 1.5rem;">El pedido solicitado no existe o no tienes acceso a él.</p>
                <a href="/pedidos" class="acciones" style="display: inline-block; margin: 0;">
                    <button class="btn btn-primary" style="width: auto; padding: 0.75rem 1.5rem;">
                        <i class="bi bi-arrow-left me-2"></i>Volver a Pedidos
                    </button>
                </a>
            </div>
        }
        else
        {
            <!-- Header -->
            <div class="pedido-header">
                <div class="pedido-breadcrumb">
                    <a href="/pedidos">Pedidos</a> / Pedido #@order.No
                </div>
                <div class="pedido-titulo-fila">
                    <div class="pedido-titulo">
                        <h1>
                            <i class="bi bi-receipt"></i>
                            Pedido #@order.No
                        </h1>
                    </div>
                    <div class="pedido-estado">
                        <span style="display: inline-block; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; font-size: 0.85rem; background: @GetStatusBgColor(order.Status); color: @GetStatusTextColor(order.Status);">
                            @GetStatusText(order.Status)
                        </span>
                    </div>
                </div>
            </div>

            <!-- Grid Principal -->
            <div class="pedido-grid">
                <!-- Sidebar -->
                <div class="pedido-sidebar">
                    <!-- Resumen -->
                    <div class="card-resumen">
                        <div class="card-header">
                            <i class="bi bi-calculator"></i>
                            Resumen del Pedido
                        </div>
                        <div class="card-body">
                            @if (order.Invoice_Discount_Value > 0)
                            {
                                <div class="resumen-fila">
                                    <span class="resumen-label">Subtotal sin descuento:</span>
                                    <span class="resumen-valor">@(CalculateSubtotalBeforeDiscount().ToString("N2")) €</span>
                                </div>
                                <div class="resumen-fila descuento">
                                    <span class="resumen-label">Descuento (@order.Invoice_Discount_Value.ToString("N1")%):</span>
                                    <span class="resumen-valor valor">-@(CalculateInvoiceDiscountAmount().ToString("N2")) €</span>
                                </div>
                            }
                            <div class="resumen-fila">
                                <span class="resumen-label">Base imponible:</span>
                                <span class="resumen-valor">@(order.Amount.ToString("N2")) €</span>
                            </div>
                            <div class="resumen-fila">
                                <span class="resumen-label">IVA:</span>
                                <span class="resumen-valor">@(order.VAT_Amount.ToString("N2")) €</span>
                            </div>
                            <div class="resumen-fila total">
                                <span class="resumen-label">Total:</span>
                                <span class="resumen-valor">@(order.Amount_Including_VAT.ToString("N2")) €</span>
                            </div>
                        </div>
                    </div>

                    <!-- Acciones -->
                    <div class="acciones">
                        <button class="btn btn-primary" @onclick="DownloadOrder" disabled="@isDownloading">
                            @if (isDownloading)
                            {
                                <span>⏳ Generando PDF...</span>
                            }
                            else
                            {
                                <span><i class="bi bi-download"></i> Descargar PDF</span>
                            }
                        </button>
                        @if (order.Status?.ToLower() == "open")
                        {
                            <button class="btn btn-outline" @onclick="CancelOrder" disabled="@isCanceling">
                                @if (isCanceling)
                                {
                                    <span>⏳ Cancelando...</span>
                                }
                                else
                                {
                                    <span><i class="bi bi-x-circle"></i> Cancelar Pedido</span>
                                }
                            </button>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(downloadMessage))
                    {
                        <div class="alert @(downloadSuccess ? "alert-success" : "alert-danger")">
                            @downloadMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(cancelMessage))
                    {
                        <div class="alert @(cancelSuccess ? "alert-success" : "alert-danger")">
                            @cancelMessage
                        </div>
                    }
                </div>

                <!-- Contenido Principal -->
                <div class="pedido-contenido">
                    <!-- Información del Pedido -->
                    <div class="card-resumen">
                        <div class="card-header">
                            <i class="bi bi-info-circle"></i>
                            Información del Pedido
                        </div>
                        <div class="card-body">
                            <div class="info-grid">
                                <div class="info-item">
                                    <span class="info-label"><i class="bi bi-calendar"></i> Fecha de Pedido</span>
                                    <span class="info-valor">
                                        @(DateTime.TryParse(order.Order_Date, out var orderDate) ? orderDate.ToString("dd/MM/yyyy") : order.Order_Date)
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label"><i class="bi bi-calendar-check"></i> Fecha de Entrega</span>
                                    <span class="info-valor">
                                        @(DateTime.TryParse(order.Expected_Receipt_Date, out var receiptDate) ? receiptDate.ToString("dd/MM/yyyy") : order.Expected_Receipt_Date)
                                    </span>
                                </div>
                                <div class="info-item full">
                                    <span class="info-label"><i class="bi bi-geo-alt"></i> Dirección de Entrega</span>
                                    <span class="info-valor">
                                        @order.Sell_to_Address<br />
                                        @order.Sell_to_County<br />
                                        @order.Sell_to_City, @order.Sell_to_Post_Code
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Artículos -->
                    <div class="card-resumen">
                        <div class="card-header">
                            <i class="bi bi-list-ul"></i>
                            Artículos del Pedido
                        </div>
                        <div class="card-body">
                            @if (GetOrderLines().Any())
                            {
                                <!-- Desktop: Tabla -->
                                <div class="tabla-responsive">
                                    <table class="tabla-articulos">
                                        <thead>
                                            <tr>
                                                <th>Código</th>
                                                <th>Descripción</th>
                                                <th>Cantidad</th>
                                                <th>Precio Unitario</th>
                                                <th>Total</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var line in GetOrderLines())
                                            {
                                                <tr>
                                                    <td><span class="codigo">@line.No</span></td>
                                                    <td><span class="descripcion">@line.Description</span></td>
                                                    <td><span class="cantidad">@line.Quantity</span></td>
                                                    <td><span class="precio">@(line.Unit_Price.ToString("N2")) €</span></td>
                                                    <td><span class="total">@((line.Quantity * line.Unit_Price).ToString("N2")) €</span></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Mobile: Cards -->
                                <div class="articulos-mobile">
                                    @foreach (var line in GetOrderLines())
                                    {
                                        <div class="articulo-card">
                                            <div class="articulo-header">
                                                <span class="articulo-codigo">@line.No</span>
                                                <span class="articulo-total">@((line.Quantity * line.Unit_Price).ToString("N2")) €</span>
                                            </div>
                                            <div class="articulo-desc">@line.Description</div>
                                            <div class="articulo-detalles">
                                                <span><strong>@line.Quantity</strong> unidad(es)</span>
                                                <span>@(line.Unit_Price.ToString("N2")) € c/u</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p style="color: #6c757d; text-align: center;">No hay artículos en este pedido.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Inject] protected IApiService Api { get; set; } = default!;
    [Parameter] public string OrderId { get; set; } = "";

    private OrderNAVCabecera? order;
    private bool isLoading = true;
    private bool isDownloading = false;
    private string downloadMessage = "";
    private bool downloadSuccess = false;
    private bool isCanceling = false;
    private string cancelMessage = "";
    private bool cancelSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        isLoading = true;
        try
        {
            if (!Auth.IsAuthenticated)
            {
                Nav.NavigateTo("/login");
                return;
            }

            order = await OrderService.GetOrderByIdAsync(OrderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<OrderNAVLineas> GetOrderLines()
    {
        if (order == null) return new List<OrderNAVLineas>();
        return order.Lines?.ToList() ?? order.LineasVenta?.ToList() ?? order.Lineas?.ToList() ?? new List<OrderNAVLineas>();
    }

    private double CalculateSubtotalBeforeDiscount()
    {
        if (order == null) return 0;
        if (order.Invoice_Discount_Value > 0)
            return order.Amount / (1 - (order.Invoice_Discount_Value / 100));
        return order.Amount;
    }

    private double CalculateInvoiceDiscountAmount()
    {
        if (order == null) return 0;
        return CalculateSubtotalBeforeDiscount() - order.Amount;
    }

    private async Task DownloadOrder()
    {
        isDownloading = true;
        downloadMessage = "";

        try
        {
            var payload = new { numero = OrderId };
            var respCR = await Api.PostAsync("customReports(1)/Microsoft.NAV.GenerateReportWithLayout", payload);

            if (respCR.IsSuccessStatusCode)
            {
                var jsonCR = await respCR.Content.ReadAsStringAsync();
                using var docCR = JsonDocument.Parse(jsonCR);
                var rootCR = docCR.RootElement;
                string? b64CR = null;

                if (rootCR.TryGetProperty("data", out var dataElCR) && dataElCR.TryGetProperty("value", out var valueElCR))
                    b64CR = valueElCR.GetString();
                else if (rootCR.TryGetProperty("value", out var valueEl2CR))
                    b64CR = valueEl2CR.GetString();

                if (!string.IsNullOrWhiteSpace(b64CR))
                {
                    var fileName = $"Pedido_{OrderId}_{DateTime.Now:yyyyMMdd}.pdf";
                    await JSRuntime.InvokeVoidAsync("fileDownload.downloadFromBase64", b64CR, fileName, "application/pdf");
                    downloadMessage = "✓ PDF descargado correctamente";
                    downloadSuccess = true;

                    _ = Task.Delay(3000).ContinueWith(_ => { downloadMessage = ""; InvokeAsync(StateHasChanged); });
                }
                else
                {
                    downloadMessage = "✗ No se pudo generar el PDF";
                    downloadSuccess = false;
                }
            }
            else
            {
                downloadMessage = $"✗ Error al generar el PDF: {respCR.StatusCode}";
                downloadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading order: {ex.Message}");
            downloadMessage = "✗ Error al descargar el PDF. Inténtalo de nuevo.";
            downloadSuccess = false;
        }
        finally
        {
            isDownloading = false;
        }
    }

    private async Task CancelOrder()
    {
        isCanceling = true;
        cancelMessage = "";

        try
        {
            var res = await OrderService.BorrarPedido(order.Id);

            if (res.IsSuccess)
            {
                cancelMessage = "✓ Pedido cancelado exitosamente. Redirigiendo...";
                cancelSuccess = true;
                OrderService.ClearCache();
                await Task.Delay(1500);
                Nav.NavigateTo("/pedidos");
            }
            else
            {
                cancelMessage = "✗ No se pudo cancelar el pedido. Inténtalo de nuevo.";
                cancelSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error canceling order: {ex.Message}");
            cancelMessage = "✗ Error al cancelar el pedido. Inténtalo de nuevo.";
            cancelSuccess = false;
        }
        finally
        {
            isCanceling = false;
            StateHasChanged();
        }
    }

    private string GetStatusClass(string status) => status?.ToLower() switch
    {
        "open" => "pending",
        "released" => "released",
        "closed" => "completed",
        "cancelled" => "cancelled",
        _ => "unknown"
    };

    private string GetStatusText(string status) => status?.ToLower() switch
    {
        "open" => "Abierto",
        "released" => "Liberado",
        "closed" => "Cerrado",
        "cancelled" => "Cancelado",
        _ => status ?? "Desconocido"
    };

    private string GetStatusBgColor(string status) => status?.ToLower() switch
    {
        "open" => "#fff3cd",
        "released" => "#d1ecf1",
        "closed" => "#d4edda",
        "cancelled" => "#f8d7da",
        _ => "#e9ecef"
    };

    private string GetStatusTextColor(string status) => status?.ToLower() switch
    {
        "open" => "#856404",
        "released" => "#0c5460",
        "closed" => "#155724",
        "cancelled" => "#721c24",
        _ => "#495057"
    };
}
