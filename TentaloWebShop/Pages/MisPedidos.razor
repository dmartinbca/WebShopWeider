@page "/pedidos"
@inject OrderService OrderService
@inject AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using TentaloWebShop.Models

<PageTitle>Mis Pedidos</PageTitle>

<!-- Header fijo arriba -->
<div class="pedidos-header-fixed">
    <div class="pedidos-header-content">
        <h1>
            <i class="bi bi-bag-check"></i>
            Mis Pedidos
        </h1>
        <button class="btn-refresh" @onclick="RefreshOrders" disabled="@isLoading">
            <i class="bi bi-arrow-clockwise"></i>
        </button>
    </div>
</div>

<div class="container-fluid px-0">

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando pedidos...</p>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-bag-x"></i>
            </div>
            <h3>No hay pedidos</h3>
            <p class="text-muted">Aún no has realizado ningún pedido.</p>
            <a href="/catalogo" class="btn btn-primary">
                <i class="bi bi-shop me-2"></i>
                Ir al Catálogo
            </a>
        </div>
    }
    else
    {
        <div class="pedidos-list">
            @foreach (var order in orders.OrderByDescending(o => o.Order_Date))
            {
                var isDownloadingThis = downloadingOrders.Contains(order.No);

                <div class="order-card">
                    <!-- Header del pedido -->
                    <div class="order-header">
                        <div class="order-info">
                            <div class="order-number">
                                <i class="bi bi-receipt"></i>
                                Pedido #@order.No
                            </div>
                            <div class="order-date">
                                @DateTime.TryParse(order.Order_Date, out var orderDate)
                                @(orderDate != default ? orderDate.ToString("dd/MM/yyyy") : order.Order_Date)
                            </div>
                        </div>
                        <div class="order-status">
                            <span class="status-badge status-@GetStatusClass(order.Status)">
                                @GetStatusText(order.Status)
                            </span>
                        </div>
                    </div>

                    <!-- Detalles del pedido -->
                    <div class="order-details">
                        <div class="order-summary">
                            <div class="summary-item">
                                <i class="bi bi-box"></i>
                                <span>@OrderService.GetOrderLineCount(order) artículos</span>
                            </div>
                            <div class="summary-item">
                                <i class="bi bi-geo-alt"></i>
                                <span>@(!string.IsNullOrEmpty(order.Sell_to_City) ? order.Sell_to_City : "Dirección no especificada")</span>
                            </div>
                        </div>

                        <div class="order-amount">
                            <div class="amount-label">Total</div>
                            <div class="amount-value">@OrderService.GetOrderTotal(order).ToString("N2") €</div>
                        </div>
                    </div>

                    <!-- Footer con botones -->
                    <div class="order-footer">
                        <button class="btn btn-outline-primary" @onclick="() => ViewOrder(order.No)">
                            <i class="bi bi-eye me-2"></i>
                            Ver Detalle
                        </button>
                        @if (order.Status?.ToLower() == "open" || order.Status?.ToLower() == "released")
                        {
                            <button class="btn btn-outline-secondary"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => DownloadOrder(order.No)"
                                    disabled="@isDownloadingThis">
                                @if (isDownloadingThis)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Descargando...</span>
                                }
                                else
                                {
                                    <i class="bi bi-download me-2"></i>
                                    <span>Descargar</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Mensajes de descarga -->
        @if (!string.IsNullOrEmpty(downloadMessage))
        {
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
                <div class="toast show" role="alert">
                    <div class="toast-header @(downloadSuccess ? "bg-primary" : "bg-danger") text-white">
                        <i class="bi @(downloadSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                        <strong class="me-auto">@(downloadSuccess ? "Éxito" : "Error")</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="ClearDownloadMessage"></button>
                    </div>
                    <div class="toast-body">
                        @downloadMessage
                    </div>
                </div>
            </div>
        }
    }
</div>

<style>
    /* ========================================
       PEDIDOS - DISEÑO MEJORADO Y RESPONSIVE
       ======================================== */

    /* Contenedor principal sin padding */
    .container-fluid.px-0 {
        padding-left: 0 !important;
        padding-right: 0 !important;
        margin-top: 0;
    }

    /* Header fijo arriba ocupando todo el ancho */
    .pedidos-header-fixed {
        position: sticky;
        top: 0;
        left: 0;
        right: 0;
        width: 100%;
        background: white;
        border-bottom: 2px solid #e9ecef;
        z-index: 100;
        padding: 1rem;
        margin: 0;
    }

    .pedidos-header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        max-width: 100%;
        margin: 0 auto;
    }

    h1 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        h1 i {
            color: #007bff;
            font-size: 1.5rem;
        }

    /* Botón refresh circular */
    .btn-refresh {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #007bff;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-refresh:hover:not(:disabled) {
            background: #007bff;
            color: white;
            border-color: #007bff;
            transform: rotate(180deg);
        }

        .btn-refresh:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    /* Lista de pedidos */
    .pedidos-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
        margin-top: 0;
        width: 100%;
    }

    /* Tarjeta de pedido */
    .order-card {
        background: white;
        border-radius: 12px;
        border: 1px solid #e9ecef;
        padding: 1.25rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        cursor: default;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
    }

        .order-card:hover {
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

    /* Header del pedido */
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
        gap: 1rem;
    }

    .order-info {
        flex: 1;
        min-width: 0;
    }

    .order-number {
        font-size: 1.125rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .order-number i {
            color: #007bff;
        }

    .order-date {
        font-size: 0.875rem;
        color: #6c757d;
    }

    /* Status badge */
    .order-status {
        flex-shrink: 0;
    }

    .status-badge {
        padding: 0.5rem 0.875rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.75rem;
        white-space: nowrap;
        display: inline-block;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-released {
        background: #d1ecf1;
        color: #0c5460;
    }

    .status-completed {
        background: #d4edda;
        color: #155724;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
    }

    .status-unknown {
        background: #e9ecef;
        color: #495057;
    }

    /* Detalles del pedido */
    .order-details {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        gap: 1rem;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    .order-summary {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .summary-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: #495057;
    }

        .summary-item i {
            color: #6c757d;
            font-size: 1rem;
        }

    /* Monto del pedido */
    .order-amount {
        text-align: right;
        flex-shrink: 0;
    }

    .amount-label {
        font-size: 0.75rem;
        color: #6c757d;
        text-transform: uppercase;
        margin-bottom: 0.25rem;
        font-weight: 600;
    }

    .amount-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #dc3545;
        white-space: nowrap;
    }

    /* Footer con botones */
    .order-footer {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

        .order-footer .btn {
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.875rem;
            padding: 0.625rem 1rem;
        }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 4rem 1rem;
    }

    .empty-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

        .empty-icon i {
            display: block;
        }

    .empty-state h3 {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .empty-state .text-muted {
        margin-bottom: 1.5rem;
    }

    /* ========================================
       RESPONSIVE - TABLET (768px - 991px)
       ======================================== */

    @@media (max-width: 991.98px) {
        h1 {
            font-size: 1.5rem;
        }

        .order-card {
            padding: 1rem;
        }

        .order-number {
            font-size: 1rem;
        }

        .amount-value {
            font-size: 1.375rem;
        }
    }

    /* ========================================
       RESPONSIVE - MOBILE (  768px)
       ======================================== */

    @@media (max-width: 767.98px) {
        .pedidos-header-fixed {
            padding: 1rem 0.75rem;
        }

        h1 {
            font-size: 1.25rem;
        }

            h1 i {
                font-size: 1.25rem;
            }

        .btn-refresh {
            width: 36px;
            height: 36px;
            font-size: 1rem;
        }

        .pedidos-list {
            padding: 0.75rem 0.5rem;
            gap: 0.75rem;
        }

        .order-card {
            padding: 1rem;
            border-radius: 8px;
        }

        /* Header en columna */
        .order-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .order-status {
            align-self: flex-start;
        }

        .status-badge {
            font-size: 0.7rem;
            padding: 0.375rem 0.75rem;
        }

        .order-number {
            font-size: 0.95rem;
        }

            .order-number i {
                font-size: 0.9rem;
            }

        .order-date {
            font-size: 0.8rem;
        }

        /* Detalles en columna */
        .order-details {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
        }

        .order-summary {
            order: 2;
        }

        .order-amount {
            order: 1;
            text-align: left;
            padding: 0.75rem;
            background: #f8f9fa;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .amount-label {
            font-size: 0.75rem;
            margin-bottom: 0;
        }

        .amount-value {
            font-size: 1.375rem;
        }

        .summary-item {
            font-size: 0.8rem;
        }

            .summary-item i {
                font-size: 0.875rem;
            }

        /* Footer con botones en columna */
        .order-footer {
            flex-direction: column;
            gap: 0.5rem;
        }

            .order-footer .btn {
                width: 100%;
                justify-content: center;
            }
    }

    /* ========================================
       RESPONSIVE - MOBILE PEQUEÑO (  576px)
       ======================================== */

    @@media (max-width: 575.98px) {
        .pedidos-header {
            padding: 0.875rem 0.75rem;
        }

        h1 {
            font-size: 1.125rem;
        }

            h1 i {
                font-size: 0.95rem;
            }

        .btn-refresh {
            width: 34px;
            height: 34px;
            font-size: 0.95rem;
        }

        .pedidos-list {
            padding: 0.75rem 0.5rem;
        }

        .order-card {
            padding: 0.875rem;
        }

        .order-number {
            font-size: 0.9rem;
        }

        .amount-value {
            font-size: 1.25rem;
        }

        .summary-item {
            font-size: 0.75rem;
        }

        .order-footer .btn {
            font-size: 0.8rem;
            padding: 0.5rem 0.75rem;
        }

        .empty-icon {
            font-size: 3rem;
        }

        .empty-state h3 {
            font-size: 1.25rem;
        }
    }

    /* ========================================
       TOAST NOTIFICATIONS
       ======================================== */

    .toast {
        min-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .toast-header {
        border-bottom: none;
    }

    .toast-body {
        padding: 1rem;
    }

    @@media (max-width: 575.98px) {
        .toast {
            min-width: 250px;
        }
    }
</style>

@code {
    [Inject] protected IApiService Api { get; set; } = default!;

    private List<OrderNAVCabecera> orders = new();
    private bool isLoading = true;
    private HashSet<string> downloadingOrders = new();
    private string downloadMessage = "";
    private bool downloadSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        try
        {
            // ✅ CORREGIDO: Verificar autenticación, no customerNo específico
            if (!Auth.IsAuthenticated)
            {
                Nav.NavigateTo("/login");
                return;
            }

            // ✅ CORREGIDO: OrderService usa GetEffectiveCustomerNo() internamente
            // No necesitamos pasar customerNo
            orders = await OrderService.GetOrdersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshOrders()
    {
        OrderService.ClearCache();
        await LoadOrders();
    }

    private void ViewOrder(string orderNo)
    {
        Nav.NavigateTo($"/pedido/{orderNo}");
    }

    private async Task DownloadOrder(string orderNo)
    {
        downloadingOrders.Add(orderNo);
        downloadMessage = "";

        try
        {
            var payload = new { numero = orderNo };
            var respCR = await Api.PostAsync(
                   "customReports(1)/Microsoft.NAV.GenerateReportWithLayout",
                   payload);

            if (respCR.IsSuccessStatusCode)
            {
                var jsonCR = await respCR.Content.ReadAsStringAsync();
                using var docCR = JsonDocument.Parse(jsonCR);
                var rootCR = docCR.RootElement;
                string? b64CR = null;

                if (rootCR.TryGetProperty("data", out var dataElCR) &&
                    dataElCR.TryGetProperty("value", out var valueElCR))
                {
                    b64CR = valueElCR.GetString();
                }
                else if (rootCR.TryGetProperty("value", out var valueEl2CR))
                {
                    b64CR = valueEl2CR.GetString();
                }

                if (!string.IsNullOrWhiteSpace(b64CR))
                {
                    var fileName = $"Pedido_{orderNo}_{DateTime.Now:yyyyMMdd}.pdf";
                    await JSRuntime.InvokeVoidAsync("fileDownload.downloadFromBase64",
                        b64CR,
                        fileName,
                        "application/pdf");

                    downloadMessage = $"Pedido {orderNo} descargado correctamente";
                    downloadSuccess = true;

                    _ = Task.Delay(4000).ContinueWith(_ =>
                    {
                        downloadMessage = "";
                        InvokeAsync(StateHasChanged);
                    });
                }
                else
                {
                    downloadMessage = $"No se pudo generar el PDF del pedido {orderNo}";
                    downloadSuccess = false;
                }
            }
            else
            {
                downloadMessage = $"Error al generar el PDF: {respCR.StatusCode}";
                downloadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading order {orderNo}: {ex.Message}");
            downloadMessage = $"Error al descargar el pedido {orderNo}. Inténtalo de nuevo.";
            downloadSuccess = false;
        }
        finally
        {
            downloadingOrders.Remove(orderNo);
            StateHasChanged();
        }
    }

    private void ClearDownloadMessage()
    {
        downloadMessage = "";
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "pending",
            "released" => "released",
            "closed" => "completed",
            "cancelled" => "cancelled",
            _ => "unknown"
        };
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "Abierto",
            "released" => "Liberado",
            "closed" => "Cerrado",
            "cancelled" => "Cancelado",
            _ => status ?? "Desconocido"
        };
    }
}