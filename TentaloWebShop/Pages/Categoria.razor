@page "/categoria/{family}"
@page "/categoria/{family}/{sub}"

@inject CategoryService Categories
@inject ProductService Products
@inject NavigationManager Nav
@inject AuthService Auth
@implements IDisposable
@if (familyModel is null)
{
    <div class="p-4">Cargando…</div>
}
else if (string.IsNullOrWhiteSpace(sub))
{
    @* Vista de FAMILIA: productos de toda la familia con filtros *@
    <Breadcrumbs Crumbs="@(new List<(string,string,bool)>
                              {
                                  ("Catálogo","/catalogo",false),
                                  (familyModel!.Name,$"/categoria/{familyModel!.Slug}",true)
                              })" />

<!-- Header con título -->
<div class="category-page">
    <div class="category-header mb-3">
        <h1 class="category-title mb-0">@familyModel!.Name</h1>
    </div>

        <!-- Filtros de Subcategorías Horizontales -->
    @if (subs.Any())
        {
            <div class="subcategory-filters mb-4">
                <div class="filter-chips">
                    <!-- Botón "Todos" activo cuando no hay subfamilia seleccionada -->
                    <button class="filter-chip active">
                        <i class="bi bi-grid-3x3-gap-fill me-1"></i>
                        Todos
                    </button>

                    <!-- Botones de cada Subcategoría -->
                    @foreach (var s in subs)
                    {
                        <button class="filter-chip"
                                @onclick='() => Nav.NavigateTo($"/categoria/{familyModel!.Slug}/{s.Slug}")'>
                            @s.Name
                        </button>
                    }
                </div>
            </div>
        }

        <!-- Contador de productos -->
        @if (items != null)
        {
            <div class="products-count text-muted mb-3">
                <i class="bi bi-box-seam"></i>
                <strong>@items.Count</strong> producto@(items.Count != 1 ? "s" : "") en total
            </div>
        }
    </div>

    <!-- Grid de Productos -->
    @if (items is null)
    {
        <div class="p-4 text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando productos...</p>
        </div>
    }
    else if (items.Count == 0)
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            No hay productos en esta familia.
        </div>
    }
    else
    {
        <div class="products-section">
            <!-- ✅ CAMBIO CRÍTICO: Usar GetGridKey() para incluir el cliente -->
            <ProductGrid Data="items" @key="@GetGridKey()" />
        </div>
    }
}
else
{
    @* Vista de SUBFAMILIA: productos filtrados *@
    <Breadcrumbs Crumbs="@(new List<(string,string,bool)>
                              {
                                  ("Catálogo","/catalogo",false),
                                  (familyModel!.Name,$"/categoria/{familyModel!.Slug}",false),
                                  (subModel?.Name ?? sub!,$"/categoria/{familyModel!.Slug}/{sub}",true)
                              })" />

<!-- Header con título y botón Ver todos -->
<div class="category-page">
    <div class="category-header mb-3">
        <h1 class="category-title mb-0">@subModel?.Name</h1>
        <a href="@($"/categoria/{familyModel!.Slug}")" class="btn btn-outline-secondary">
            <i class="bi bi-grid me-1"></i>
            Ver todos en @familyModel.Name
        </a>
    </div>

        <!-- Filtros de Subcategorías Horizontales -->
    @if (subs.Any())
        {
            <div class="subcategory-filters mb-4">
                <div class="filter-chips">
                    <!-- Botón "Todos" -->
                    <button class="filter-chip" @onclick='() => Nav.NavigateTo($"/categoria/{familyModel!.Slug}")'>
                        <i class="bi bi-grid-3x3-gap-fill me-1"></i>
                        Todos
                    </button>

                    <!-- Botones de cada Subcategoría -->
                    @foreach (var s in subs)
                    {
                        var isActive = s.Slug.Equals(sub, StringComparison.OrdinalIgnoreCase);
                        <button class="filter-chip @(isActive ? "active" : "")"
                                @onclick='() => Nav.NavigateTo($"/categoria/{familyModel!.Slug}/{s.Slug}")'>
                            @s.Name
                        </button>
                    }
                </div>
            </div>
        }

        <!-- Contador de productos -->
        @if (items != null)
        {
            <div class="products-count text-muted mb-3">
                <i class="bi bi-box-seam"></i>
                <strong>@items.Count</strong> producto@(items.Count != 1 ? "s" : "") en esta subcategoría
            </div>
        }
    </div>

    <!-- Grid de Productos -->
    @if (items is null)
    {
        <div class="p-4 text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando productos...</p>
        </div>
    }
    else if (items.Count == 0)
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            No hay productos en esta subfamilia.
        </div>
    }
    else
    {
        <div class="products-section">
            <!-- ✅ CAMBIO CRÍTICO: Usar GetGridKey() para incluir el cliente -->
            <ProductGrid Data="items" @key="@GetGridKey()" />
        </div>
    }
}

@code {
    [Parameter] public string family { get; set; } = string.Empty;
    [Parameter] public string? sub { get; set; }

    private Category? familyModel;
    private Subcategory? subModel;
    private IEnumerable<Subcategory> subs = Enumerable.Empty<Subcategory>();
    private List<Product>? items;

    protected override async Task OnInitializedAsync()
    {
        // ✅ Ahora sin wrapper, directo porque el evento es Func<Task>
        Auth.OnCustomerChanged += OnCustomerChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        items = null;
        familyModel = Categories.GetFamily(family);
        subs = Categories.GetSubs(family);

        if (!string.IsNullOrWhiteSpace(sub))
        {
            subModel = Categories.GetSub(family, sub!);
            items = await Products.GetBySubfamilyAsync(family, sub!);
        }
        else
        {
            subModel = null;
            items = await Products.GetByFamilyAsync(family);
        }
    }

    // ✅ Ahora es directo, sin wrapper
    private async Task OnCustomerChanged()
    {
        Console.WriteLine($"[Categoria.OnCustomerChanged] Cliente cambió");
        await LoadProductsAsync();
        await InvokeAsync(StateHasChanged);
        Console.WriteLine($"[Categoria.OnCustomerChanged] Completado - Items: {items?.Count}");
    }

    // ✅ CRÍTICO: Incluir el cliente en el @key
    private string GetGridKey()
    {
        // ✅ CRÍTICO: Usar CurrentCustomer (puede ser cliente seleccionado por Sales Team)
        // Si no hay CurrentCustomer, usar CurrentUser.CustomerNo
        var clientId = Auth.CurrentCustomer?.CustNo ?? Auth.CurrentUser?.CustomerNo ?? "default";
        Console.WriteLine($"[Categoria.GetGridKey] Key: {family}/{sub}/{clientId}");
        return $"{family}/{sub}/{clientId}";
    }

    public void Dispose()
    {
        Auth.OnCustomerChanged -= OnCustomerChanged;
    }
}
