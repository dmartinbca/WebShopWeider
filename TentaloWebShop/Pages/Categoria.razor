@page "/categoria/{family}"
@page "/categoria/{family}/{sub}"

@inject CategoryService Categories
@inject ProductService Products
@inject NavigationManager Nav

@if (familyModel is null)
{
    <div class="p-4">Cargando…</div>
}
else
{
    <Breadcrumbs Crumbs="@breadcrumbs" />

    <div class="category-page">
        <!-- Título de la sección -->
        <div class="category-header mb-4">
            <h1 class="category-title">@currentTitle</h1>
            @if (!string.IsNullOrWhiteSpace(sub))
            {
                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearSubcategory">
                    <i class="bi bi-arrow-left me-1"></i>Ver todos en @familyModel.Name
                </button>
            }
        </div>

        @if (subs.Any())
        {
            <!-- Chips de subcategorías como filtros -->
            <div class="subcategory-filters mb-4">
                <div class="filter-chips">
                    <button class="filter-chip @(string.IsNullOrWhiteSpace(sub) ? "active" : "")"
                            @onclick="() => NavigateToFamily()">
                        <i class="bi bi-grid-fill me-1"></i>
                        Todos
                    </button>
                    @foreach (var s in subs)
                    {
                        <button class="filter-chip @(sub == s.Slug ? "active" : "")"
                                @onclick="() => NavigateToSubcategory(s.Slug)">
                            @s.Name
                        </button>
                    }
                </div>
            </div>
        }

        <!-- Grid de productos -->
        <div class="products-section">
            @if (items is null)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-danger" role="status">
                        <span class="visually-hidden">Cargando productos...</span>
                    </div>
                    <p class="mt-3 text-muted">Cargando productos...</p>
                </div>
            }
            else if (items.Count == 0)
            {
                <div class="alert alert-info d-flex align-items-center" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    <div>
                        No hay productos disponibles en esta @(string.IsNullOrWhiteSpace(sub) ? "categoría" : "subcategoría").
                    </div>
                </div>
            }
            else
            {
                <div class="products-count mb-3">
                    <span class="text-muted">
                        <i class="bi bi-box-seam me-1"></i>
                        @items.Count @(items.Count == 1 ? "producto" : "productos") @(string.IsNullOrWhiteSpace(sub) ? "en esta categoría" : "en esta subcategoría")
                    </span>
                </div>
                <ProductGrid Data="items" @key="@currentKey" />
            }
        </div>
    </div>
}

@code {
    [Parameter] public string family { get; set; } = string.Empty;
    [Parameter] public string? sub { get; set; }

    private Category? familyModel;
    private Subcategory? subModel;
    private IEnumerable<Subcategory> subs = Enumerable.Empty<Subcategory>();
    private List<Product>? items;
    private string currentKey => $"{family}/{sub ?? "all"}";
    private string currentTitle => string.IsNullOrWhiteSpace(sub) 
        ? familyModel?.Name ?? "" 
        : subModel?.Name ?? sub ?? "";

    private List<(string text, string url, bool last)> breadcrumbs
    {
        get
        {
            var crumbs = new List<(string, string, bool)>
            {
                ("Catálogo", "/catalogo", false),
                (familyModel!.Name, $"/categoria/{familyModel!.Slug}", string.IsNullOrWhiteSpace(sub))
            };

            if (!string.IsNullOrWhiteSpace(sub))
            {
                crumbs.Add((subModel?.Name ?? sub!, $"/categoria/{familyModel!.Slug}/{sub}", true));
            }

            return crumbs;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        items = null;
        familyModel = Categories.GetFamily(family);
        subs = Categories.GetSubs(family);

        if (!string.IsNullOrWhiteSpace(sub))
        {
            // Vista de SUBFAMILIA: productos filtrados por subfamilia
            subModel = Categories.GetSub(family, sub!);
            items = await Products.GetBySubfamilyAsync(family, sub!);
        }
        else
        {
            // Vista de FAMILIA: todos los productos de la familia
            subModel = null;
            items = await Products.GetByFamilyAsync(family);
        }
    }

    private void NavigateToFamily()
    {
        Nav.NavigateTo($"/categoria/{family}");
    }

    private void NavigateToSubcategory(string subSlug)
    {
        Nav.NavigateTo($"/categoria/{family}/{subSlug}");
    }

    private void ClearSubcategory()
    {
        Nav.NavigateTo($"/categoria/{family}");
    }
}