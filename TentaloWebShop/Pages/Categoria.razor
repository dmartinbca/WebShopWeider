@page "/categoria/{family}"
@page "/categoria/{family}/{sub}"

@inject CategoryService Categories
@inject ProductService Products

@if (familyModel is null)
{
    <div class="p-4">Cargando…</div>
}
else if (string.IsNullOrWhiteSpace(sub))
@* Vista de FAMILIA: listado de subfamilias *@
{
    <Breadcrumbs Crumbs="@(new List<(string,string,bool)>
                 {
                     ("Catálogo","/catalogo",false),
                     (familyModel!.Name,$"/categoria/{familyModel!.Slug}",true)
                 })" />

<h1 class="mb-3">@familyModel!.Name</h1>

    <div class="row g-3">
    @foreach (var s in subs)
        {
            <div class="col-6 col-md-4 col-lg-3">
                <a class="card h-100 text-decoration-none" href="@($"/categoria/{familyModel!.Slug}/{s.Slug}")">
                    <div class="card-body d-flex align-items-center justify-content-center">
                        <span class="fw-semibold">@s.Name</span>
                    </div>
                </a>
            </div>
        }
    </div>
}
else
@* Vista de SUBFAMILIA: productos *@
{
    <Breadcrumbs Crumbs="@(new List<(string,string,bool)>
                 {
                     ("Catálogo","/catalogo",false),
                     (familyModel!.Name,$"/categoria/{familyModel!.Slug}",false),
                     (subModel?.Name ?? sub!,$"/categoria/{familyModel!.Slug}/{sub}",true)
                 })" />

<h1 class="mb-3">@subModel?.Name</h1>
<ProductGrid Data="items" />
}

@code {
    [Parameter] public string family { get; set; } = string.Empty;
    [Parameter] public string? sub { get; set; }

    private Category? familyModel;
    private Subcategory? subModel;
    private IEnumerable<Subcategory> subs = Enumerable.Empty<Subcategory>();
    private IEnumerable<Product>? items;

    protected override async Task OnParametersSetAsync()
    {
        familyModel = Categories.GetFamily(family);
        subs = Categories.GetSubs(family);

        if (!string.IsNullOrWhiteSpace(sub))
        {
            subModel = Categories.GetSub(family, sub!);
            items = await Products.GetBySubfamilyAsync(family, sub!);
        }
        else
        {
            subModel = null;
            items = null;
        }
    }
}
