@page "/"
@inject AuthService Auth
@inject CarouselService CarouselSvc
@implements IDisposable

<!-- ✅ CARRUSEL SOLO PARA CLIENTES DIRECTOS (NO para Sales Team) -->
@if (Auth.CurrentUser?.Tipo != "Sales Team")
{
    <!-- Carrusel Hero -->
    @if (carouselItems != null && carouselItems.Count > 0)
    {
        <div class="hero-carousel">
            <div class="carousel-wrapper">
                @for (int i = 0; i < carouselItems.Count; i++)
                {
                    int index = i;
                    <div class="carousel-slide @(currentSlide == index ? "active" : "")"
                         style="position: absolute; width: 100%; height: 100%; opacity: @(currentSlide == index ? "1" : "0"); transition: opacity 1s ease-in-out; pointer-events: @(currentSlide == index ? "auto" : "none");">
                        <img src="@carouselItems[index].ImageUrl"
                             alt="@carouselItems[index].Alt"
                             style="width: 100%; height: 100%; object-fit: cover; object-position: center; pointer-events: none;" />
                        <div class="carousel-overlay" style="pointer-events: none;">
                            <div class="carousel-content container" style="pointer-events: auto;">
                                <h1 class="hero-title">@carouselItems[index].Title</h1>
                                <p class="hero-subtitle">@carouselItems[index].Subtitle</p>
                                @if (!string.IsNullOrEmpty(carouselItems[index].ButtonText))
                                {
                                    <a href="@carouselItems[index].ButtonLink"
                                       class="btn btn-hero"
                                       @onclick:stopPropagation="true">
                                        @carouselItems[index].ButtonText
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Indicadores -->
            <div class="carousel-indicators" style="pointer-events: auto;">
                @for (int i = 0; i < carouselItems.Count; i++)
                {
                    int index = i;
                    <button class="indicator @(currentSlide == index ? "active" : "")"
                            @onclick="() => GoToSlide(index)"
                            @onclick:stopPropagation="true"
                            aria-label="Ir a slide @(index + 1)">
                    </button>
                }
            </div>

            <!-- Controles de navegación -->
            <button class="carousel-control prev"
                    @onclick="PreviousSlide"
                    @onclick:stopPropagation="true"
                    aria-label="Anterior"
                    style="pointer-events: auto;">
                <i class="bi bi-chevron-left"></i>
            </button>
            <button class="carousel-control next"
                    @onclick="NextSlide"
                    @onclick:stopPropagation="true"
                    aria-label="Siguiente"
                    style="pointer-events: auto;">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    }
    else if (isLoading)
    {
        <div class="hero-carousel" style="display: flex; align-items: center; justify-content: center; min-height: 400px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando carrusel...</span>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning container my-4" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            No hay carruseles disponibles en este momento.
        </div>
    }
}

<!-- ✅ SI ES SALES TEAM, MOSTRAR MENSAJE DE BIENVENIDA ALTERNATIVO -->
@if (Auth.CurrentUser?.Tipo == "Sales Team")
{
    <div class="container py-5">
        <div class="alert alert-info d-flex align-items-center" role="alert">
            <i class="bi bi-info-circle me-3 fs-4"></i>
            <div>
                <strong>¡Bienvenido, @Auth.CurrentUser?.FirstName!</strong>
                <p class="mb-0 mt-2">Accede al catálogo de productos o selecciona un cliente para empezar.</p>
            </div>
        </div>
    </div>
}

<!-- Catálogo de productos -->
<div class="container py-4">
    <h1 class="mb-3">Nuestros Productos</h1>
    <ProductGrid />
</div>

@code {
    private List<CarouselItem>? carouselItems;
    private int currentSlide = 0;
    private Timer? autoPlayTimer;
    private bool isLoading = true;
    private const int AutoPlayInterval = 5000; // 5 segundos

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // ✅ Cargar carruseles desde Business Central Cloud
            if (Auth.CurrentUser?.Tipo != "Sales Team")
            {
                isLoading = true;
                carouselItems = await CarouselSvc.GetCarruselesAsync();
                isLoading = false;

                // Solo iniciar autoplay si hay carruseles y NO es Sales Team
                if (carouselItems != null && carouselItems.Count > 0)
                {
                    StartAutoPlay();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Index.OnInitializedAsync] Error cargando carruseles: {ex.Message}");
            isLoading = false;
            carouselItems = new List<CarouselItem>();
        }
    }

    private void StartAutoPlay()
    {
        autoPlayTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                NextSlide();
                StateHasChanged();
            });
        }, null, AutoPlayInterval, AutoPlayInterval);
    }

    private void NextSlide()
    {
        if (carouselItems != null && carouselItems.Count > 0)
        {
            currentSlide = (currentSlide + 1) % carouselItems.Count;
        }
    }

    private void PreviousSlide()
    {
        if (carouselItems != null && carouselItems.Count > 0)
        {
            currentSlide = (currentSlide - 1 + carouselItems.Count) % carouselItems.Count;
        }
    }

    private void GoToSlide(int index)
    {
        currentSlide = index;
        ResetAutoPlay();
    }

    private void ResetAutoPlay()
    {
        autoPlayTimer?.Dispose();
        StartAutoPlay();
    }

    public void Dispose()
    {
        autoPlayTimer?.Dispose();
    }
}
